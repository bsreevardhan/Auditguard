import subprocess
import pandas as pd
import os
import datetime

cis_index = ['1.1.1',
 '1.1.2',
 '1.1.3',
 '1.1.4',
 '1.1.5',
 '1.1.7',
 '1.2.1',
 '1.2.2',
 '1.2.4',
 '17.1.1',
 '17.2.1',
 '17.2.2',
 '17.2.3',
 '17.3.1',
 '17.3.2',
 '17.5.1',
 '17.5.2',
 '17.5.3',
 '17.5.4',
 '17.5.5',
 '17.5.6',
 '17.6.1',
 '17.6.2',
 '17.6.3',
 '17.6.4',
 '17.7.1',
 '17.7.2',
 '17.7.3',
 '17.7.4',
 '17.7.5',
 '17.8.1',
 '17.9.1',
 '17.9.2',
 '17.9.3',
 '17.9.4',
 '17.9.5',
 '1.1.6',
 '2.3.1.1',
 '2.3.1.3',
 '2.3.2.1',
 '2.3.2.2',
 '2.3.7.1',
 '2.3.7.2',
 '2.3.7.4',
 '2.3.7.5',
 '2.3.7.6',
 '2.3.7.7',
 '2.3.7.8',
 '2.3.8.1',
 '2.3.8.2',
 '2.3.8.3',
 '2.3.9.1',
 '2.3.9.2',
 '2.3.9.3',
 '2.3.9.4',
 '2.3.9.5',
 '2.3.10.2',
 '2.3.10.3',
 '2.3.10.4',
 '2.3.10.5',
 '2.3.10.6',
 '2.3.10.7',
 '2.3.10.8',
 '2.3.10.9',
 '2.3.10.10',
 '2.3.10.11',
 '2.3.10.12',
 '2.3.11.1',
 '2.3.11.2',
 '2.3.11.3',
 '2.3.11.4',
 '2.3.11.5',
 '2.3.11.7',
 '2.3.11.8',
 '2.3.11.9',
 '2.3.11.10',
 '2.3.15.1',
 '2.3.15.2',
 '2.3.17.1',
 '2.3.17.2',
 '2.3.17.3',
 '2.3.17.4',
 '2.3.17.5',
 '2.3.17.6',
 '2.3.17.7',
 '2.3.17.8',
 '5.3',
 '5.6',
 '5.7',
 '5.8',
 '5.10',
 '5.11',
 '5.13',
 '5.24',
 '5.26',
 '5.28',
 '5.30',
 '5.31',
 '5.32',
 '5.33',
 '5.36',
 '5.37',
 '5.41',
 '5.42',
 '5.43',
 '5.44',
 '5.45',
 '9.2.1',
 '9.2.2',
 '9.2.3',
 '9.2.4',
 '9.2.5',
 '9.2.6',
 '9.2.7',
 '9.2.8',
 '9.3.1',
 '9.3.2',
 '9.3.3',
 '9.3.4',
 '9.3.5',
 '9.3.6',
 '9.3.7',
 '9.3.8',
 '9.3.9',
 '9.3.10',
 '18.1.1.1',
 '18.1.1.2',
 '18.1.2.2',
 '18.4.1',
 '18.4.2',
 '18.4.3',
 '18.4.4',
 '18.4.5',
 '18.4.6',
 '18.5.1',
 '18.5.2',
 '18.5.3',
 '18.5.5',
 '18.5.7',
 '18.5.9',
 '18.5.10',
 '18.5.13',
 '18.6.4.1',
 '18.6.4.2',
 '18.6.4.3',
 '18.6.8.1',
 '18.6.11.2',
 '18.6.11.3',
 '18.6.21.1',
 '18.6.23.2.1',
 '18.7.1',
 '18.7.2',
 '18.7.3',
 '18.7.4',
 '18.7.5',
 '18.7.6',
 '18.7.7',
 '18.7.8',
 '18.7.9',
 '18.7.10',
 '18.7.11',
 '18.9.3.1',
 '18.9.4.1',
 '18.9.4.2',
 '18.9.5.1',
 '18.9.5.2',
 '18.9.5.3',
 '18.9.5.4',
 '18.9.5.5',
 '18.9.5.6',
 '18.9.5.7',
 '18.9.7.2',
 '18.9.13.1',
 '18.9.19.2',
 '18.9.20.1.2',
 '18.9.20.1.6',
 '18.9.25.1',
 '18.9.25.2',
 '18.9.27.1',
 '18.9.27.2',
 '18.9.27.3',
 '18.9.27.4',
 '18.9.32.6.1',
 '18.9.32.6.2',
 '18.9.32.6.5',
 '18.9.32.6.6',
 '18.9.34.1',
 '18.9.34.2',
 '18.9.35.1',
 '18.9.35.2',
 '18.9.50.1.1',
 '18.10.3.2',
 '18.10.4.1',
 '18.10.5.1',
 '18.10.7.1',
 '18.10.7.2',
 '18.10.7.3',
 '18.10.8.1.1',
 '18.10.12.1',
 '18.10.12.3',
 '18.10.13.1',
 '18.10.14.1',
 '18.10.14.2',
 '18.10.14.3',
 '18.10.15.1',
 '18.10.15.3',
 '18.10.15.4',
 '18.10.15.5',
 '18.10.15.6',
 '18.10.15.7',
 '18.10.15.8',
 '18.10.16.1',
 '18.10.17.1',
 '18.10.17.2',
 '18.10.17.3',
 '18.10.17.4',
 '18.10.26.1.1',
 '18.10.26.1.2',
 '18.10.26.2.1',
 '18.10.26.2.2',
 '18.10.26.3.1',
 '18.10.26.3.2',
 '18.10.26.4.1',
 '18.10.26.4.2',
 '18.10.29.2',
 '18.10.29.4',
 '18.10.29.5',
 '18.10.33.1',
 '18.10.42.1',
 '18.10.43.5.1',
 '18.10.43.6.1.1',
 '18.10.43.6.3.1',
 '18.10.43.10.1',
 '18.10.43.10.2',
 '18.10.43.10.3',
 '18.10.43.10.4',
 '18.10.43.13.1',
 '18.10.43.13.2',
 '18.10.43.16',
 '18.10.43.17',
 '18.10.44.1',
 '18.10.44.2',
 '18.10.44.3',
 '18.10.44.4',
 '18.10.44.5',
 '18.10.44.6',
 '18.10.51.1',
 '18.10.57.2.3',
 '18.10.57.3.3.3',
 '18.10.57.3.9.1',
 '18.10.57.3.9.2',
 '18.10.57.3.9.3',
 '18.10.57.3.9.4',
 '18.10.57.3.9.5',
 '18.10.57.3.11.1',
 '18.10.58.1',
 '18.10.59.3',
 '18.10.59.4',
 '18.10.59.5',
 '18.10.59.6',
 '18.10.66.2',
 '18.10.66.3',
 '18.10.66.4',
 '18.10.72.1',
 '18.10.76.1.1',
 '18.10.76.1.2',
 '18.10.76.1.3',
 '18.10.76.1.4',
 '18.10.76.3.1',
 '18.10.76.3.2',
 '18.10.78.1',
 '18.10.79.1',
 '18.10.80.2',
 '18.10.81.1',
 '18.10.81.2',
 '18.10.82.1',
 '18.10.82.2',
 '18.10.87.1',
 '18.10.87.2',
 '18.10.89.1.1',
 '18.10.89.1.2',
 '18.10.89.1.3',
 '18.10.89.2.1',
 '18.10.89.2.3',
 '18.10.89.2.4',
 '18.10.91.1',
 '18.10.91.2',
 '18.10.92.2.1',
 '18.10.93.1.1',
 '18.10.93.2.1',
 '18.10.93.2.2',
 '18.10.93.2.3',
 '18.10.93.4.1',
 '19.1.3.1',
 '19.1.3.2',
 '2.3.1.2',
 '2.3.1.4',
 '2.3.1.5',
 '2.3.10.1',
 '2.3.11.6',
 '2.2.1',
 '2.2.2',
 '2.2.3',
 '2.2.4',
 '2.2.5',
 '2.2.6',
 '2.2.7',
 '2.2.8',
 '2.2.9',
 '2.2.10',
 '2.2.11',
 '2.2.12',
 '2.2.13',
 '2.2.15',
 '2.2.16',
 '2.2.17',
 '2.2.18',
 '2.2.19',
 '2.2.20',
 '2.2.21',
 '2.2.22',
 '2.2.23',
 '2.2.24',
 '2.2.25',
 '2.2.26',
 '2.2.27',
 '2.2.30',
 '2.2.31',
 '2.2.32',
 '2.2.33',
 '2.2.34',
 '2.2.35',
 '2.2.36',
 '2.2.37',
 '2.2.38']

title = ["Ensure 'Enforce password history' is set to '24 or more password(s)'",
 "Ensure 'Maximum password age' is set to '365 or fewer days, but not 0'",
 "Ensure 'Minimum password age' is set to '1 or more day(s)'",
 "Ensure 'Minimum password length' is set to '14 or more character(s)'",
 "Ensure 'Password must meet complexity requirements' is set to 'Enabled'",
 "Ensure 'Store passwords using reversible encryption' is set to 'Disabled'",
 "Ensure 'Account lockout duration' is set to '15 or more minute(s)'",
 "Ensure 'Account lockout threshold' is set to '5 or fewer invalid logon attempt(s), but not 0'",
 "Ensure 'Reset account lockout counter after' is set to '15 or more minute(s)'",
 "Ensure 'Audit Credential Validation' is set to 'Success and Failure'",
 "Ensure 'Audit Application Group Management' is set to 'Success and Failure'",
 "Ensure 'Audit Security Group Management' is set to include 'Success'",
 "Ensure 'Audit User Account Management' is set to 'Success and Failure'",
 "Ensure 'Audit PNP Activity' is set to include 'Success'",
 "Ensure 'Audit Process Creation' is set to include 'Success'",
 "Ensure 'Audit Account Lockout' is set to include 'Failure'",
 "Ensure 'Audit Group Membership' is set to include 'Success'",
 "Ensure 'Audit Logoff' is set to include 'Success'",
 "Ensure 'Audit Logon' is set to 'Success and Failure'",
 "Ensure 'Audit Other Logon/Logoff Events' is set to 'Success and Failure'",
 "Ensure 'Audit Special Logon' is set to include 'Success'",
 "Ensure 'Audit Detailed File Share' is set to include 'Failure'",
 "Ensure 'Audit File Share' is set to 'Success and Failure'",
 "Ensure 'Audit Other Object Access Events' is set to 'Success and Failure'",
 "Ensure 'Audit Removable Storage' is set to 'Success and Failure'",
 "Ensure 'Audit Audit Policy Change' is set to include 'Success'",
 "Ensure 'Audit Authentication Policy Change' is set to include 'Success'",
 "Ensure 'Audit Authorization Policy Change' is set to include 'Success'",
 "Ensure 'Audit MPSSVC Rule-Level Policy Change' is set to 'Success and Failure'",
 "Ensure 'Audit Other Policy Change Events' is set to include 'Failure'",
 "Ensure 'Audit Sensitive Privilege Use' is set to 'Success and Failure'",
 "Ensure 'Audit IPsec Driver' is set to 'Success and Failure'",
 "Ensure 'Audit Other System Events' is set to 'Success and Failure'",
 "Ensure 'Audit Security State Change' is set to include 'Success'",
 "Ensure 'Audit Security System Extension' is set to include 'Success'",
 "Ensure 'Audit System Integrity' is set to 'Success and Failure'",
 "Ensure 'Relax minimum password length limits' is set to 'Enabled'",
 "Ensure 'Accounts: Block Microsoft accounts' is set to 'Users can't add or log on with Microsoft accounts'",
 "Ensure 'Accounts: Limit local account use of blank passwords to console logon only' is set to 'Enabled'",
 "Ensure 'Audit: Force audit policy subcategory settings (Windows Vista or later) to override audit policy category settings' is set to 'Enabled'",
 "Ensure 'Audit: Shut down system immediately if unable to log security audits' is set to 'Disabled'",
 "Ensure 'Interactive logon: Do not require CTRL+ALT+DEL' is set to 'Disabled'",
 "Ensure 'Interactive logon: Don't display last signed-in' is set to 'Enabled'",
 "Ensure 'Interactive logon: Machine inactivity limit' is set to '900 or fewer second(s), but not 0'",
 "Configure 'Interactive logon: Message text for users attempting to log on'",
 "Configure 'Interactive logon: Message title for users attempting to log on'",
 "Ensure 'Interactive logon: Prompt user to change password before expiration' is set to 'between 5 and 14 days'",
 "Ensure 'Interactive logon: Smart card removal behavior' is set to 'Lock Workstation' or higher",
 "Ensure 'Microsoft network client: Digitally sign communications (always)' is set to 'Enabled'",
 "Ensure 'Microsoft network client: Digitally sign communications (if server agrees)' is set to 'Enabled'",
 "Ensure 'Microsoft network client: Send unencrypted password to third-party SMB servers' is set to 'Disabled'",
 "Ensure 'Microsoft network server: Amount of idle time required before suspending session' is set to '15 or fewer minute(s)'",
 "Ensure 'Microsoft network server: Digitally sign communications (always)' is set to 'Enabled'",
 "Ensure 'Microsoft network server: Digitally sign communications (if client agrees)' is set to 'Enabled'",
 "Ensure 'Microsoft network server: Disconnect clients when logon hours expire' is set to 'Enabled'",
 "Ensure 'Microsoft network server: Server SPN target name validation level' is set to 1 - 'Accept if provided by client' or 2 - higher",
 "Ensure 'Network access: Do not allow anonymous enumeration of SAM accounts' is set to 'Enabled'",
 "Ensure 'Network access: Do not allow anonymous enumeration of SAM accounts and shares' is set to 'Enabled'",
 "Ensure 'Network access: Do not allow storage of passwords and credentials for network authentication' is set to 'Enabled'",
 "Ensure 'Network access: Let Everyone permissions apply to anonymous users' is set to 'Disabled'",
 "Ensure 'Network access: Named Pipes that can be accessed anonymously' is set to 'None'",
 "Ensure 'Network access: Remotely accessible registry paths' is configured",
 "Ensure 'Network access: Remotely accessible registry paths and sub-paths' is configured",
 "Ensure 'Network access: Restrict anonymous access to Named Pipes and Shares' is set to 'Enabled'",
 "Ensure 'Network access: Restrict clients allowed to make remote calls to SAM' is set to 'Administrators: Remote Access: Allow'",
 "Ensure 'Network access: Shares that can be accessed anonymously' is set to 'None'",
 "Ensure 'Network access: Sharing and security model for local accounts' is set to 'Classic - local users authenticate as themselves'",
 "Ensure 'Network security: Allow Local System to use computer identity for NTLM' is set to 'Enabled'",
 "Ensure 'Network security: Allow LocalSystem NULL session fallback' is set to 'Disabled'",
 "Ensure 'Network Security: Allow PKU2U authentication requests to this computer to use online identities' is set to 'Disabled'",
 "Ensure 'Network security: Configure encryption types allowed for Kerberos' is set to 'AES128_HMAC_SHA1, AES256_HMAC_SHA1, Future encryption types'",
 "Ensure 'Network security: Do not store LAN Manager hash value on next password change' is set to 'Enabled'",
 "Ensure 'Network security: LAN Manager authentication level' is set to 'Send NTLMv2 response only. Refuse LM & NTLM'",
 "Ensure 'Network security: LDAP client signing requirements' is set to 'Negotiate signing' or higher",
 "Ensure 'Network security: Minimum session security for NTLM SSP based (including secure RPC) clients' is set to 'Require NTLMv2 session security, Require 128-bit encryption'",
 "Ensure 'Network security: Minimum session security for NTLM SSP based (including secure RPC) servers' is set to 'Require NTLMv2 session security, Require 128-bit encryption'",
 "Ensure 'System objects: Require case insensitivity for non-Windows subsystems' is set to 'Enabled'",
 "Ensure 'System objects: Strengthen default permissions of internal system objects (e.g. Symbolic Links)' is set to 'Enabled'",
 "Ensure 'User Account Control: Admin Approval Mode for the Built-in Administrator account' is set to 'Enabled'",
 "Ensure 'User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode' is set to 'Prompt for consent on the secure desktop' or higher",
 "Ensure 'User Account Control: Behavior of the elevation prompt for standard users' is set to 'Automatically deny elevation requests'",
 "Ensure 'User Account Control: Detect application installations and prompt for elevation' is set to 'Enabled'",
 "Ensure 'User Account Control: Only elevate UIAccess applications that are installed in secure locations' is set to 'Enabled'",
 "Ensure 'User Account Control: Run all administrators in Admin Approval Mode' is set to 'Enabled'",
 "Ensure 'User Account Control: Switch to the secure desktop when prompting for elevation' is set to 'Enabled'",
 "Ensure 'User Account Control: Virtualize file and registry write failures to per-user locations' is set to 'Enabled'",
 "Ensure 'Computer Browser (Browser)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'IIS Admin Service (IISADMIN)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Infrared monitor service (irmon)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Internet Connection Sharing (ICS) (SharedAccess)' is set to 'Disabled'",
 "Ensure 'LxssManager (LxssManager)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Microsoft FTP Service (FTPSVC)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'OpenSSH SSH Server (sshd)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Remote Procedure Call (RPC) Locator (RpcLocator)' is set to 'Disabled'",
 "Ensure 'Routing and Remote Access (RemoteAccess)' is set to 'Disabled'",
 "Ensure 'Simple TCP/IP Services (simptcp)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Special Administration Console Helper (sacsvr)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'SSDP Discovery (SSDPSRV)' is set to 'Disabled'",
 "Ensure 'UPnP Device Host (upnphost)' is set to 'Disabled'",
 "Ensure 'Web Management Service (WMSvc)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Windows Media Player Network Sharing Service (WMPNetworkSvc)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Windows Mobile Hotspot Service (icssvc)' is set to 'Disabled'",
 "Ensure 'World Wide Web Publishing Service (W3SVC)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Xbox Accessory Management Service (XboxGipSvc)' is set to 'Disabled'",
 "Ensure 'Xbox Live Auth Manager (XblAuthManager)' is set to 'Disabled'",
 "Ensure 'Xbox Live Game Save (XblGameSave)' is set to 'Disabled'",
 "Ensure 'Xbox Live Networking Service (XboxNetApiSvc)' is set to 'Disabled'",
 "Ensure 'Windows Firewall: Private: Firewall state' is set to 'On (recommended)'",
 "Ensure 'Windows Firewall: Private: Inbound connections' is set to 'Block (default)'",
 "Ensure 'Windows Firewall: Private: Outbound connections' is set to 'Allow (default)'",
 "Ensure 'Windows Firewall: Private: Settings: Display a notification' is set to 'No'",
 "Ensure 'Windows Firewall: Private: Logging: Name' is set to '%SystemRoot%\\System32\\logfiles\\firewall\\privatefw.log'",
 "Ensure 'Windows Firewall: Private: Logging: Size limit (KB)' is set to '16,384 KB or greater'",
 "Ensure 'Windows Firewall: Private: Logging: Log dropped packets' is set to 'Yes'",
 "Ensure 'Windows Firewall: Private: Logging: Log successful connections' is set to 'Yes'",
 "Ensure 'Windows Firewall: Public: Firewall state' is set to 'On (recommended)'",
 "Ensure 'Windows Firewall: Public: Inbound connections' is set to 'Block (default)'",
 "Ensure 'Windows Firewall: Public: Outbound connections' is set to 'Allow (default)'",
 "Ensure 'Windows Firewall: Public: Settings: Display a notification' is set to 'No'",
 "Ensure 'Windows Firewall: Public: Settings: Apply local firewall rules' is set to 'No'",
 "Ensure 'Windows Firewall: Public: Settings: Apply local connection security rules' is set to 'No'",
 "Ensure 'Windows Firewall: Public: Logging: Name' is set to '%SystemRoot%\\System32\\logfiles\\firewall\\publicfw.log'",
 "Ensure 'Windows Firewall: Public: Logging: Size limit (KB)' is set to '16,384 KB or greater'",
 "Ensure 'Windows Firewall: Public: Logging: Log dropped packets' is set to 'Yes'",
 "Ensure 'Windows Firewall: Public: Logging: Log successful connections' is set to 'Yes'",
 "Ensure 'Prevent enabling lock screen camera' is set to 'Enabled'",
 "Ensure 'Prevent enabling lock screen slide show' is set to 'Enabled'",
 "Ensure 'Allow users to enable online speech recognition services' is set to 'Disabled'",
 "Ensure 'Configure RPC packet level privacy setting for incoming connections' is set to 'Enabled'",
 "Ensure 'Configure SMB v1 client driver' is set to 'Enabled: Disable driver (recommended)'",
 "Ensure 'Configure SMB v1 server' is set to 'Disabled'",
 "Ensure 'Enable Structured Exception Handling Overwrite Protection (SEHOP)' is set to 'Enabled'",
 "Ensure 'NetBT NodeType configuration' is set to 'Enabled: P-node (recommended)'",
 "Ensure 'WDigest Authentication' is set to 'Disabled'",
 "Ensure 'MSS: (AutoAdminLogon) Enable Automatic Logon (not recommended)' is set to 'Disabled'",
 "Ensure 'MSS: (DisableIPSourceRouting IPv6) IP source routing protection level (protects against packet spoofing)' is set to 'Enabled: Highest protection, source routing is completely disabled'",
 "Ensure 'MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing)' is set to 'Enabled: Highest protection, source routing is completely disabled'",
 "Ensure 'MSS: (EnableICMPRedirect) Allow ICMP redirects to override OSPF generated routes' is set to 'Disabled'",
 "Ensure 'MSS: (NoNameReleaseOnDemand) Allow the computer to ignore NetBIOS name release requests except from WINS servers' is set to 'Enabled'",
 "Ensure 'MSS: (SafeDllSearchMode) Enable Safe DLL search mode (recommended)' is set to 'Enabled'",
 "Ensure 'MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended)' is set to 'Enabled: 5 or fewer seconds'",
 "Ensure 'MSS: (WarningLevel) Percentage threshold for the security event log at which the system will generate a warning' is set to 'Enabled: 90% or less'",
 "Ensure 'Configure DNS over HTTPS (DoH) name resolution' is set to 'Enabled: Allow DoH' or higher",
 "Ensure 'Configure NetBIOS settings' is set to 2 - 'Enabled: Disable NetBIOS name resolution on public networks' (or 0 - Disable NetBIOS name resolution)",
 "Ensure 'Turn off multicast name resolution' is set to 'Enabled'",
 "Ensure 'Enable insecure guest logons' is set to 'Disabled'",
 "Ensure 'Prohibit installation and configuration of Network Bridge on your DNS domain network' is set to 'Enabled'",
 "Ensure 'Prohibit use of Internet Connection Sharing on your DNS domain network' is set to 'Enabled'",
 "Ensure 'Minimize the number of simultaneous connections to the Internet or a Windows Domain' is set to 'Enabled: 3 = Prevent Wi-Fi when on Ethernet'",
 "Ensure 'Allow Windows to automatically connect to suggested open hotspots, to networks shared by contacts, and to hotspots offering paid services' is set to 'Disabled'",
 "Ensure 'Allow Print Spooler to accept client connections' is set to 'Disabled'",
 "Ensure 'Configure Redirection Guard' is set to 'Enabled: Redirection Guard Enabled'",
 "Ensure 'Configure RPC connection settings: Protocol to use for outgoing RPC connections' is set to 'Enabled: RPC over TCP'",
 "Ensure 'Configure RPC connection settings: Use authentication for outgoing RPC connections' is set to 'Enabled: Default'",
 "Ensure 'Configure RPC listener settings: Protocols to allow for incoming RPC connections' is set to 'Enabled: RPC over TCP'",
 "Ensure 'Configure RPC listener settings: Authentication protocol to use for incoming RPC connections:' is set to 'Enabled: Negotiate' or higher",
 "Ensure 'Configure RPC over TCP port' is set to 'Enabled: 0'",
 "Ensure 'Limits print driver installation to Administrators' is set to 'Enabled'",
 "Ensure 'Manage processing of Queue-specific files' is set to 'Enabled: Limit Queue-specific files to Color profiles'",
 "Ensure 'Point and Print Restrictions: When installing drivers for a new connection' is set to 'Enabled: Show warning and elevation prompt'",
 "Ensure 'Point and Print Restrictions: When updating drivers for an existing connection' is set to 'Enabled: Show warning and elevation prompt'",
 "Ensure 'Include command line in process creation events' is set to 'Enabled'",
 "Ensure 'Encryption Oracle Remediation' is set to 'Enabled: Force Updated Clients'",
 "Ensure 'Remote host allows delegation of non-exportable credentials' is set to 'Enabled'",
 "Ensure 'Turn On Virtualization Based Security' is set to 'Enabled'",
 "Ensure 'Turn On Virtualization Based Security: Select Platform Security Level' is set to 'Secure Boot' or higher",
 "Ensure 'Turn On Virtualization Based Security: Virtualization Based Protection of Code Integrity' is set to 'Enabled with UEFI lock'",
 "Ensure 'Turn On Virtualization Based Security: Require UEFI Memory Attributes Table' is set to 'Pass (checked)'",
 "Ensure 'Turn On Virtualization Based Security: Credential Guard Configuration' is set to 'Enabled with UEFI lock'",
 "Ensure 'Turn On Virtualization Based Security: Secure Launch Configuration' is set to 'Enabled'",
 "Ensure 'Turn On Virtualization Based Security: Kernel-mode Hardware-enforced Stack Protection' is set to 'Enabled: Enabled in enforcement mode'",
 "Ensure 'Prevent device metadata retrieval from the Internet' is set to 'Enabled'",
 "Ensure 'Boot-Start Driver Initialization Policy' is set to 'Enabled: Good, unknown and bad but critical'",
 "Ensure 'Continue experiences on this device' is set to 'Disabled'",
 "Ensure 'Turn off downloading of print drivers over HTTP' is set to 'Enabled'",
 "Ensure 'Turn off Internet download for Web publishing and online ordering wizards' is set to 'Enabled'",
 "Ensure 'Allow Custom SSPs and APs to be loaded into LSASS' is set to 'Disabled'",
 "Ensure 'Configures LSASS to run as a protected process' is set to 'Enabled: Enabled with UEFI Lock'",
 "Ensure 'Block user from showing account details on sign-in' is set to 'Enabled'",
 "Ensure 'Do not display network selection UI' is set to 'Enabled'",
 "Ensure 'Turn off app notifications on the lock screen' is set to 'Enabled'",
 "Ensure 'Turn on convenience PIN sign-in' is set to 'Disabled'",
 "Ensure 'Allow network connectivity during connected-standby (on battery)' is set to 'Disabled'",
 "Ensure 'Allow network connectivity during connected-standby (plugged in)' is set to 'Disabled'",
 "Ensure 'Require a password when a computer wakes (on battery)' is set to 'Enabled'",
 "Ensure 'Require a password when a computer wakes (plugged in)' is set to 'Enabled'",
 "Ensure 'Configure Offer Remote Assistance' is set to 'Disabled'",
 "Ensure 'Configure Solicited Remote Assistance' is set to 'Disabled'",
 "Ensure 'Enable RPC Endpoint Mapper Client Authentication' is set to 'Enabled'",
 "Ensure 'Restrict Unauthenticated RPC clients' is set to 'Enabled: Authenticated'",
 "Ensure 'Enable Windows NTP Client' is set to 'Enabled'",
 "Ensure 'Prevent non-admin users from installing packaged Windows apps' is set to 'Enabled'",
 "Ensure 'Let Windows apps activate with voice while the system is locked' is set to 'Enabled: Force Deny'",
 "Ensure 'Allow Microsoft accounts to be optional' is set to 'Enabled'",
 "Ensure 'Disallow Autoplay for non-volume devices' is set to 'Enabled'",
 "Ensure 'Set the default behavior for AutoRun' is set to 'Enabled: Do not execute any autorun commands'",
 "Ensure 'Turn off Autoplay' is set to 'Enabled: All drives'",
 "Ensure 'Configure enhanced anti-spoofing' is set to 'Enabled'",
 "Ensure 'Turn off cloud consumer account state content' is set to 'Enabled'",
 "Ensure 'Turn off Microsoft consumer experiences' is set to 'Enabled'",
 "Ensure 'Require pin for pairing' is set to 'Enabled: First Time' OR 'Enabled: Always'",
 "Ensure 'Do not display the password reveal button' is set to 'Enabled'",
 "Ensure 'Enumerate administrator accounts on elevation' is set to 'Disabled'",
 "Ensure 'Prevent the use of security questions for local accounts' is set to 'Enabled'",
 "Ensure 'Allow Diagnostic Data' is set to '0 - Enabled: Diagnostic data off (not recommended)' or '1 - Enabled: Send required diagnostic data'",
 "Ensure 'Disable OneSettings Downloads' is set to 'Enabled'",
 "Ensure 'Do not show feedback notifications' is set to 'Enabled'",
 "Ensure 'Enable OneSettings Auditing' is set to 'Enabled'",
 "Ensure 'Limit Diagnostic Log Collection' is set to 'Enabled'",
 "Ensure 'Limit Dump Collection' is set to 'Enabled'",
 "Ensure 'Toggle user control over Insider builds' is set to 'Disabled'",
 "Ensure 'Download Mode' is NOT set to 'Enabled: Internet'",
 "Ensure 'Enable App Installer' is set to 'Disabled'",
 "Ensure 'Enable App Installer Experimental Features' is set to 'Disabled'",
 "Ensure 'Enable App Installer Hash Override' is set to 'Disabled'",
 "Ensure 'Enable App Installer ms-appinstaller protocol' is set to 'Disabled'",
 "Ensure 'Application: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled'",
 "Ensure 'Application: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater'",
 "Ensure 'Security: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled'",
 "Ensure 'Security: Specify the maximum log file size (KB)' is set to 'Enabled: 196,608 or greater'",
 "Ensure 'Setup: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled'",
 "Ensure 'Setup: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater'",
 "Ensure 'System: Control Event Log behavior when the log file reaches its maximum size' is set to 'Disabled'",
 "Ensure 'System: Specify the maximum log file size (KB)' is set to 'Enabled: 32,768 or greater'",
 "Ensure 'Turn off Data Execution Prevention for Explorer' is set to 'Disabled'",
 "Ensure 'Turn off heap termination on corruption' is set to 'Disabled'",
 "Ensure 'Turn off shell protocol protected mode' is set to 'Disabled'",
 "Ensure 'Prevent the computer from joining a homegroup' is set to 'Enabled'",
 "Ensure 'Block all consumer Microsoft account user authentication' is set to 'Enabled'",
 "Ensure 'Configure local setting override for reporting to Microsoft MAPS' is set to 'Disabled'",
 "Ensure 'Configure Attack Surface Reduction rules' is set to 'Enabled'",
 "Ensure 'Prevent users and apps from accessing dangerous websites' is set to 'Enabled: Block'",
 "Ensure 'Scan all downloaded files and attachments' is set to 'Enabled'",
 "Ensure 'Turn off real-time protection' is set to 'Disabled'",
 "Ensure 'Turn on behavior monitoring' is set to 'Enabled'",
 "Ensure 'Turn on script scanning' is set to 'Enabled'",
 "Ensure 'Scan removable drives' is set to 'Enabled'",
 "Ensure 'Turn on e-mail scanning' is set to 'Enabled'",
 "Ensure 'Configure detection for potentially unwanted applications' is set to 'Enabled: Block'",
 "Ensure 'Turn off Microsoft Defender AntiVirus' is set to 'Disabled'",
 "Ensure 'Allow auditing events in Microsoft Defender Application Guard' is set to 'Enabled'",
 "Ensure 'Allow camera and microphone access in Microsoft Defender Application Guard' is set to 'Disabled'",
 "Ensure 'Allow data persistence for Microsoft Defender Application Guard' is set to 'Disabled'",
 "Ensure 'Allow files to download and save to the host operating system from Microsoft Defender Application Guard' is set to 'Disabled'",
 "Ensure 'Configure Microsoft Defender Application Guard clipboard settings: Clipboard behavior setting' is set to 'Enabled: Enable clipboard operation from an isolated session to the host'",
 "Ensure 'Turn on Microsoft Defender Application Guard in Managed Mode' is set to 'Enabled: 1'",
 "Ensure 'Prevent the usage of OneDrive for file storage' is set to 'Enabled'",
 "Ensure 'Do not allow passwords to be saved' is set to 'Enabled'",
 "Ensure 'Do not allow drive redirection' is set to 'Enabled'",
 "Ensure 'Always prompt for password upon connection' is set to 'Enabled'",
 "Ensure 'Require secure RPC communication' is set to 'Enabled'",
 "Ensure 'Require use of specific security layer for remote (RDP) connections' is set to 'Enabled: SSL'",
 "Ensure 'Require user authentication for remote connections by using Network Level Authentication' is set to 'Enabled'",
 "Ensure 'Set client connection encryption level' is set to 'Enabled: High Level'",
 "Ensure 'Do not delete temp folders upon exit' is set to 'Disabled'",
 "Ensure 'Prevent downloading of enclosures' is set to 'Enabled'",
 "Ensure 'Allow Cortana' is set to 'Disabled'",
 "Ensure 'Allow Cortana above lock screen' is set to 'Disabled'",
 "Ensure 'Allow indexing of encrypted files' is set to 'Disabled'",
 "Ensure 'Allow search and Cortana to use location' is set to 'Disabled'",
 "Ensure 'Only display the private store within the Microsoft Store' is set to 'Enabled'",
 "Ensure 'Turn off Automatic Download and Install of updates' is set to 'Disabled'",
 "Ensure 'Turn off the offer to update to the latest version of Windows' is set to 'Enabled'",
 "Ensure 'Allow widgets' is set to 'Disabled'",
 "Ensure 'Notify Malicious' is set to 'Enabled'",
 "Ensure 'Notify Password Reuse' is set to 'Enabled'",
 "Ensure 'Notify Unsafe App' is set to 'Enabled'",
 "Ensure 'Service Enabled' is set to 'Enabled'",
 "Ensure 'Configure Windows Defender SmartScreen' is set to 'Enabled'",
 "Ensure 'Prevent bypassing Windows Defender SmartScreen prompts for sites' is set to 'Enabled'",
 "Ensure 'Enables or disables Windows Game Recording and Broadcasting' is set to 'Disabled'",
 "Ensure 'Enable ESS with Supported Peripherals' is set to 'Enabled: 1'",
 "Ensure 'Allow Windows Ink Workspace' is set to 'Enabled: On, but disallow access above lock' OR 'Enabled: Disabled'",
 "Ensure 'Allow user control over installs' is set to 'Disabled'",
 "Ensure 'Always install with elevated privileges' is set to 'Disabled'",
 "Ensure 'Enable MPR notifications for the system' is set to 'Disabled'",
 "Ensure 'Sign-in and lock last interactive user automatically after a restart' is set to 'Disabled'",
 "Ensure 'Turn on PowerShell Script Block Logging' is set to 'Enabled'",
 "Ensure 'Turn on PowerShell Transcription' is set to 'Enabled'",
 "Ensure 'Allow Basic authentication' is set to 'Disabled' (Client)",
 "Ensure 'Allow unencrypted traffic' is set to 'Disabled' (Client)",
 "Ensure 'Disallow Digest authentication' is set to 'Enabled' (Client)",
 "Ensure 'Allow Basic authentication' is set to 'Disabled' (Service)",
 "Ensure 'Allow unencrypted traffic' is set to 'Disabled' (Service)",
 "Ensure 'Disallow WinRM from storing RunAs credentials' is set to 'Enabled'",
 "Ensure 'Allow clipboard sharing with Windows Sandbox' is set to 'Disabled'",
 "Ensure 'Allow networking in Windows Sandbox' is set to 'Disabled'",
 "Ensure 'Prevent users from modifying settings' is set to 'Enabled'",
 "Ensure 'No auto-restart with logged on users for scheduled automatic updates installations' is set to 'Disabled'",
 "Ensure 'Configure Automatic Updates' is set to 'Enabled'",
 "Ensure 'Configure Automatic Updates: Scheduled install day' is set to '0 - Every day'",
 'Ensure \'Remove access to `"Pause updates`" feature\' is set to \'Enabled\'',
 "Ensure 'Manage preview builds' is set to 'Disabled'",
 "Ensure 'Enable screen saver' is set to 'Enabled'",
 "Ensure 'Password protect the screen saver' is set to 'Enabled'",
 "Ensure 'Accounts: Guest account status' is set to 'Disabled'",
 "Configure 'Accounts: Rename administrator account'",
 "Configure 'Accounts: Rename guest account'",
 "Ensure 'Network access: Allow anonymous SID/Name translation' is set to 'Disabled'",
 "Ensure 'Network security: Force logoff when logon hours expire' is set to 'Enabled'",
 "Ensure 'Access Credential Manager as a trusted caller' is set to 'No One'",
 "Ensure 'Access this computer from the network' is set to 'Administrators, Remote Desktop Users'",
 "Ensure 'Act as part of the operating system' is set to 'No One'",
 "Ensure 'Adjust memory quotas for a process' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE'",
 "Ensure 'Allow log on locally' is set to 'Administrators, Users'",
 "Ensure 'Allow log on through Remote Desktop Services' is set to 'Administrators, Remote Desktop Users'",
 "Ensure 'Back up files and directories' is set to 'Administrators'",
 "Ensure 'Change the system time' is set to 'Administrators, LOCAL SERVICE'",
 "Ensure 'Change the time zone' is set to 'Administrators, LOCAL SERVICE, Users'",
 "Ensure 'Create a pagefile' is set to 'Administrators'",
 "Ensure 'Create a token object' is set to 'No One'",
 "Ensure 'Create global objects' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE'",
 "Ensure 'Create permanent shared objects' is set to 'No One'",
 "Ensure 'Debug programs' is set to 'Administrators'",
 "Ensure 'Deny log on as a batch job' to include 'Guests'",
 "Ensure 'Deny log on as a service' to include 'Guests'",
 "Ensure 'Deny log on locally' to include 'Guests'",
 "Ensure 'Deny log on through Remote Desktop Services' to include 'Guests'",
 "Ensure 'Enable computer and user accounts to be trusted for delegation' is set to 'No One'",
 "Ensure 'Force shutdown from a remote system' is set to 'Administrators'",
 "Ensure 'Generate security audits' is set to 'LOCAL SERVICE, NETWORK SERVICE'",
 "Ensure 'Impersonate a client after authentication' is set to 'Administrators, LOCAL SERVICE, NETWORK SERVICE, SERVICE'",
 "Ensure 'Increase scheduling priority' is set to 'Administrators, Window Manager\\Window Manager Group'",
 "Ensure 'Load and unload device drivers' is set to 'Administrators'",
 "Ensure 'Lock pages in memory' is set to 'No One'",
 "Ensure 'Manage auditing and security log' is set to 'Administrators'",
 "Ensure 'Modify an object label' is set to 'No One'",
 "Ensure 'Modify firmware environment values' is set to 'Administrators'",
 "Ensure 'Perform volume maintenance tasks' is set to 'Administrators'",
 "Ensure 'Profile single process' is set to 'Administrators'",
 "Ensure 'Profile system performance' is set to 'Administrators, NT SERVICE\\WdiServiceHost'",
 "Ensure 'Replace a process level token' is set to 'LOCAL SERVICE, NETWORK SERVICE'",
 "Ensure 'Restore files and directories' is set to 'Administrators'",
 "Ensure 'Shut down the system' is set to 'Administrators, Users'",
 "Ensure 'Take ownership of files or other objects' is set to 'Administrators'"]

code = ['$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["PasswordHistorySize"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if ($setPolicy -ne 24) {\n            return @{\n                Message = "\'PasswordHistorySize\' currently set to: $setPolicy. Expected: 24"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["MaximumPasswordAge"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if (($setPolicy -gt 365 -or $setPolicy -le 0)) {\n            if($setPolicy -eq -1){ #Setting 0 in GroupPolicy translates to -1 in AuditPolicy\n                $setPolicy = "Password never expires"\n            }\n            return @{\n                Message = "\'MaximumPasswordAge\' currently set to: $setPolicy. Expected: x <= 365 and x > 0"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["MinimumPasswordAge"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if (($setPolicy -lt 1)) {\n            return @{\n                Message = "\'MinimumPasswordAge\' currently set to: $setPolicy. Expected: x >= 1"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["MinimumPasswordLength"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if (($setPolicy -lt 14)) {\n            return @{\n                Message = "\'MinimumPasswordLength\' currently set to: $setPolicy. Expected: x >= 14"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["PasswordComplexity"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if ($setPolicy -ne 1) {\n            return @{\n                Message = "\'PasswordComplexity\' currently set to: $setPolicy. Expected: 1"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["ClearTextPassword"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if ($setPolicy -ne 0) {\n            return @{\n                Message = "\'ClearTextPassword\' currently set to: $setPolicy. Expected: 0"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["LockoutDuration"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if (($setPolicy -lt 15 -or $setPolicy -gt 99999)) {\n            return @{\n                Message = "\'LockoutDuration\' currently set to: $setPolicy. Expected: x >= 15 minutes and x <= 99999 minutes"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["LockoutBadCount"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if (($setPolicy -gt 5 -or $setPolicy -le 0)) {\n            return @{\n                Message = "\'LockoutBadCount\' currently set to: $setPolicy. Expected: x <= 5 and x > 0"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $setPolicy = $securityPolicy[\'System Access\']["ResetLockoutCount"]\n        \n        if ($null -eq $setPolicy) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        $setPolicy = [long]$setPolicy\n        \n        if (($setPolicy -gt 99999 -or $setPolicy -lt 15)) {\n            return @{\n                Message = "\'ResetLockoutCount\' currently set to: $setPolicy. Expected: x <= 99999 minutes and x >= 15 minutes"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n    }\n}\nï»¿# Common\nfunction Get-AuditPolicySubcategoryGUID {\n\tParam(\n        [Parameter(Mandatory = $Pass)]\n        [AllowEmptyString()]\n\t\t[string] $Subcategory\n    )\n\n    $map = @{\n        "Security State Change"                  = "{0CCE9210-69AE-11D9-BED3-505054503030}"\n        "Security System Extension"              = "{0CCE9211-69AE-11D9-BED3-505054503030}"\n        "System Integrity"                       = "{0CCE9212-69AE-11D9-BED3-505054503030}"\n        "IPsec Driver"                           = "{0CCE9213-69AE-11D9-BED3-505054503030}"\n        "Other System Events"                    = "{0CCE9214-69AE-11D9-BED3-505054503030}"\n        "Logon"                                  = "{0CCE9215-69AE-11D9-BED3-505054503030}"\n        "Logoff"                                 = "{0CCE9216-69AE-11D9-BED3-505054503030}"\n        "Account Lockout"                        = "{0CCE9217-69AE-11D9-BED3-505054503030}"\n        "IPsec Main Mode"                        = "{0CCE9218-69AE-11D9-BED3-505054503030}"\n        "IPsec Quick Mode"                       = "{0CCE9219-69AE-11D9-BED3-505054503030}"\n        "IPsec Extended Mode"                    = "{0CCE921A-69AE-11D9-BED3-505054503030}"\n        "Special Logon"                          = "{0CCE921B-69AE-11D9-BED3-505054503030}"\n        "Other Logon/Logoff Events"              = "{0CCE921C-69AE-11D9-BED3-505054503030}"\n        "Network Policy Server"                  = "{0CCE9243-69AE-11D9-BED3-505054503030}"\n        "User / Device Claims"                   = "{0CCE9247-69AE-11D9-BED3-505054503030}"\n        "Group Membership"                       = "{0CCE9249-69AE-11D9-BED3-505054503030}"\n        "File System"                            = "{0CCE921D-69AE-11D9-BED3-505054503030}"\n        "Registry"                               = "{0CCE921E-69AE-11D9-BED3-505054503030}"\n        "Kernel Object"                          = "{0CCE921F-69AE-11D9-BED3-505054503030}"\n        "SAM"                                    = "{0CCE9220-69AE-11D9-BED3-505054503030}"\n        "Certification Services"                 = "{0CCE9221-69AE-11D9-BED3-505054503030}"\n        "Application Generated"                  = "{0CCE9222-69AE-11D9-BED3-505054503030}"\n        "Handle Manipulation"                    = "{0CCE9223-69AE-11D9-BED3-505054503030}"\n        "File Share"                             = "{0CCE9224-69AE-11D9-BED3-505054503030}"\n        "Filtering Platform Packet Drop"         = "{0CCE9225-69AE-11D9-BED3-505054503030}"\n        "Filtering Platform Connection"          = "{0CCE9226-69AE-11D9-BED3-505054503030}"\n        "Other Object Access Events"             = "{0CCE9227-69AE-11D9-BED3-505054503030}"\n        "Detailed File Share"                    = "{0CCE9244-69AE-11D9-BED3-505054503030}"\n        "Removable Storage"                      = "{0CCE9245-69AE-11D9-BED3-505054503030}"\n        "Central Policy Staging"                 = "{0CCE9246-69AE-11D9-BED3-505054503030}"\n        "Sensitive Privilege Use"                = "{0CCE9228-69AE-11D9-BED3-505054503030}"\n        "Non Sensitive Privilege Use"            = "{0CCE9229-69AE-11D9-BED3-505054503030}"\n        "Other Privilege Use Events"             = "{0CCE922A-69AE-11D9-BED3-505054503030}"\n        "Process Creation"                       = "{0CCE922B-69AE-11D9-BED3-505054503030}"\n        "Process Termination"                    = "{0CCE922C-69AE-11D9-BED3-505054503030}"\n        "DPAPI Activity"                         = "{0CCE922D-69AE-11D9-BED3-505054503030}"\n        "RPC Events"                             = "{0CCE922E-69AE-11D9-BED3-505054503030}"\n        "Plug and Play Events"                   = "{0CCE9248-69AE-11D9-BED3-505054503030}"\n        "Token Right Adjusted Events"            = "{0CCE924A-69AE-11D9-BED3-505054503030}"\n        "Audit Policy Change"                    = "{0CCE922F-69AE-11D9-BED3-505054503030}"\n        "Authentication Policy Change"           = "{0CCE9230-69AE-11D9-BED3-505054503030}"\n        "Authorization Policy Change"            = "{0CCE9231-69AE-11D9-BED3-505054503030}"\n        "MPSSVC Rule-Level Policy Change"        = "{0CCE9232-69AE-11D9-BED3-505054503030}"\n        "Filtering Platform Policy Change"       = "{0CCE9233-69AE-11D9-BED3-505054503030}"\n        "Other Policy Change Events"             = "{0CCE9234-69AE-11D9-BED3-505054503030}"\n        "User Account Management"                = "{0CCE9235-69AE-11D9-BED3-505054503030}"\n        "Computer Account Management"            = "{0CCE9236-69AE-11D9-BED3-505054503030}"\n        "Security Group Management"              = "{0CCE9237-69AE-11D9-BED3-505054503030}"\n        "Distribution Group Management"          = "{0CCE9238-69AE-11D9-BED3-505054503030}"\n        "Application Group Management"           = "{0CCE9239-69AE-11D9-BED3-505054503030}"\n        "Other Account Management Events"        = "{0CCE923A-69AE-11D9-BED3-505054503030}"\n        "Directory Service Access"               = "{0CCE923B-69AE-11D9-BED3-505054503030}"\n        "Directory Service Changes"              = "{0CCE923C-69AE-11D9-BED3-505054503030}"\n        "Directory Service Replication"          = "{0CCE923D-69AE-11D9-BED3-505054503030}"\n        "Detailed Directory Service Replication" = "{0CCE923E-69AE-11D9-BED3-505054503030}"\n        "Credential Validation"                  = "{0CCE923F-69AE-11D9-BED3-505054503030}"\n        "Kerberos Service Ticket Operations"     = "{0CCE9240-69AE-11D9-BED3-505054503030}"\n        "Other Account Logon Events"             = "{0CCE9241-69AE-11D9-BED3-505054503030}"\n        "Kerberos Authentication Service"        = "{0CCE9242-69AE-11D9-BED3-505054503030}"\n    }\n\n    if ($map.ContainsKey($Subcategory)) {\n        return $map[$Subcategory]\n    }\n    retur',
 '# Get the audit policy for the subcategory Credential Validation\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Credential Validation"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Credential Validation\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Application Group Management\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Application Group Management"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Application Group Management\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Security Group Management\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Security Group Management"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Security Group Management\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory User Account Management\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "User Account Management"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'User Account Management\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Plug and Play Events\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Plug and Play Events"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Plug and Play Events\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Process Creation\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Process Creation"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Process Creation\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Account Lockout\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Account Lockout"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Account Lockout\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Failure" -and $setting -ne "Success and Failure" -And $setting -ne "Fehler" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Group Membership\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Group Membership"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Group Membership\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Logoff\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Logoff"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Logoff\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Logon\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Logon"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Logon\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Other Logon/Logoff Events\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Other Logon/Logoff Events"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Other Logon/Logoff Events\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Special Logon\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Special Logon"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Special Logon\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Detailed File Share\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Detailed File Share"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Detailed File Share\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Failure" -and $setting -ne "Success and Failure" -And $setting -ne "Fehler" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory File Share\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "File Share"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'File Share\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Other Object Access Events\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Other Object Access Events"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Other Object Access Events\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Removable Storage\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Removable Storage"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Removable Storage\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Audit Policy Change\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Audit Policy Change"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Audit Policy Change\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Authentication Policy Change\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Authentication Policy Change"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Authentication Policy Change\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Authorization Policy Change\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Authorization Policy Change"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Authorization Policy Change\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Mpssvc Rule-Level Policy Change\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Mpssvc Rule-Level Policy Change"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Mpssvc Rule-Level Policy Change\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Other Policy Change Events\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Other Policy Change Events"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Other Policy Change Events\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Failure" -and $setting -ne "Success and Failure" -And $setting -ne "Fehler" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Sensitive Privilege Use\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Sensitive Privilege Use"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Sensitive Privilege Use\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Ipsec Driver\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Ipsec Driver"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Ipsec Driver\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Other System Events\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Other System Events"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Other System Events\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Security State Change\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Security State Change"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Security State Change\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory Security System Extension\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "Security System Extension"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'Security System Extension\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success" -and $setting -ne "Success and Failure" -And $setting -ne "Erfolg" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '# Get the audit policy for the subcategory System Integrity\n        $subCategoryGUID = Get-AuditPolicySubcategoryGUID -Subcategory "System Integrity"\n        \n        if ([string]::IsNullOrEmpty($subCategoryGUID)) {\n            return @{\n                Message = "Cannot get Subcategory \'System Integrity\'"\n                Status = "None"\n            }\n        }\n        \n        $auditPolicyString = auditpol /get /subcategory:"$subCategoryGUID"\n        \n        # auditpol does not throw exceptions, so test the results and throw if needed\n        if ($LASTEXITCODE -ne 0) {\n            $errorString = "\'auditpol /get /subcategory:\'$subCategoryGUID\' returned with exit code $LASTEXITCODE"\n            throw [System.ArgumentException] $errorString\n            Write-Error -Message $errorString\n        }\n        \n        if ($null -eq $auditPolicyString) {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting. Auditpol returned nothing."\n            }\n        }\n        \n        # Remove empty lines and headers\n        $line = $auditPolicyString `\n            | Where-Object { $_ } `\n            | Select-Object -Skip 3\n        \n        if ($line -notmatch "(No Auditing|Success and Failure|Success|Failure|Keine Ãœberwachung|Erfolg und Fehler|Erfolg|Fehler)$") {\n            return @{\n                Status = "Warning"\n                Message = "Couldn\'t get setting."\n            }\n        }\n        \n        $setting = $Matches[0]\n        \n        if ($setting -ne "Success and Failure" -And $setting -ne "Erfolg und Fehler") {\n            return @{\n                Status = "Fail"\n                Message = "Set to: $setting"\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SAM" `\n                -Name "RelaxMinimumPasswordLengthLimits" `\n                | Select-Object -ExpandProperty "RelaxMinimumPasswordLengthLimits"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "NoConnectedUser" `\n                | Select-Object -ExpandProperty "NoConnectedUser"\n        \n            if ($regValue -ne 3) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "LimitBlankPasswordUse" `\n                | Select-Object -ExpandProperty "LimitBlankPasswordUse"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "SCENoApplyLegacyAuditPolicy" `\n                | Select-Object -ExpandProperty "SCENoApplyLegacyAuditPolicy"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\LSA" `\n                -Name "CrashOnAuditFail" `\n                | Select-Object -ExpandProperty "CrashOnAuditFail"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "DisableCAD" `\n                | Select-Object -ExpandProperty "DisableCAD"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "DontDisplayLastUserName" `\n                | Select-Object -ExpandProperty "DontDisplayLastUserName"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "InactivityTimeoutSecs" `\n                | Select-Object -ExpandProperty "InactivityTimeoutSecs"\n        \n            if (($regValue -gt 900 -or $regValue -eq 0)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x <= 900 and x != 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "LegalNoticeText" `\n                | Select-Object -ExpandProperty "LegalNoticeText"\n        \n            if ($regValue -notmatch ".+") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: Matching expression \'.+\'"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "LegalNoticeCaption" `\n                | Select-Object -ExpandProperty "LegalNoticeCaption"\n        \n            if ($regValue -notmatch ".+") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: Matching expression \'.+\'"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon" `\n                -Name "PasswordExpiryWarning" `\n                | Select-Object -ExpandProperty "PasswordExpiryWarning"\n        \n            if (($regValue -gt 14 -or $regValue -lt 5)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x <= 14 and x >= 5"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon" `\n                -Name "ScRemoveOption" `\n                | Select-Object -ExpandProperty "ScRemoveOption"\n        \n            if ($regValue -notmatch "^(1|2|3)$") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: Matching expression \'^(1|2|3)$\'"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if((Get-SmbClientConfiguration).RequireSecuritySignature -ne $Pass){\n                return @{\n                    Message = "RequireSecuritySignature is not set to Pass"\n                    Status = "Fail"\n                }\n            }\n            return @{\n                Message = "Compliant"\n                Status = "Pass"\n            }\n        }\n        catch {\n            try{\n                $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters" `\n                -Name "RequireSecuritySignature" `\n                | Select-Object -ExpandProperty "RequireSecuritySignature"\n                \n                if ($regValue -ne 1) {\n                    return @{\n                        Message = "Registry value is \'$regValue\'. Expected: 1"\n                        Status = "Fail"\n                    }\n                }\n                return @{\n                    Message = "Compliant"\n                    Status = "Pass"\n                }\n            }\n            catch [System.Management.Automation.PSArgumentException] {\n                return @{\n                    Message = "Registry value not found."\n                    Status = "Fail"\n                }\n            }\n            catch [System.Management.Automation.ItemNotFoundException] {\n                return @{\n                    Message = "Registry key not found."\n                    Status = "Fail"\n                }\n            }\n        }\n ',
 'try {\n            if((Get-SmbClientConfiguration).EnableSecuritySignature -ne $Pass){\n                return @{\n                    Message = "EnableSecuritySignature is not set to Pass"\n                    Status = "Fail"\n                }\n            }\n            return @{\n                Message = "Compliant"\n                Status = "Pass"\n            }\n        }\n        catch {\n            try{\n                $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters" `\n                -Name "EnableSecuritySignature" `\n                | Select-Object -ExpandProperty "EnableSecuritySignature"\n                \n                if ($regValue -ne 1) {\n                    return @{\n                        Message = "Registry value is \'$regValue\'. Expected: 1"\n                        Status = "Fail"\n                    }\n                }\n                return @{\n                    Message = "Compliant"\n                    Status = "Pass"\n                }\n            }\n            catch [System.Management.Automation.PSArgumentException] {\n                return @{\n                    Message = "Registry value not found."\n                    Status = "Fail"\n                }\n            }\n            catch [System.Management.Automation.ItemNotFoundException] {\n                return @{\n                    Message = "Registry key not found."\n                    Status = "Fail"\n                }\n            }\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters" `\n                -Name "EnablePlainTextPassword" `\n                | Select-Object -ExpandProperty "EnablePlainTextPassword"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters" `\n                -Name "AutoDisconnect" `\n                | Select-Object -ExpandProperty "AutoDisconnect"\n        \n            if (($regValue -gt 15)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x <= 15"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if((Get-SmbServerConfiguration -ErrorAction Stop).RequireSecuritySignature -ne $Pass){\n                return @{\n                    Message = "RequireSecuritySignature is not set to Pass"\n                    Status = "Fail"\n                }\n            }\n            return @{\n                Message = "Compliant"\n                Status = "Pass"\n            }\n        }\n        catch {\n                       try{\n                $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters" `\n                -Name "RequireSecuritySignature" `\n                | Select-Object -ExpandProperty "RequireSecuritySignature"\n                \n                return @{\n                    Message = "Registry value is \'$regValue\'. Get-SMBServerConfiguration failed, resorted to checking registry, which might not be 100% accurate. See <a href=`"https://learn.microsoft.com/en-us/troubleshoot/windows-server/networking/overview-server-message-block-signing#policy-locations-for-smb-signing`">here</a> and <a href=`"https://techcommunity.microsoft.com/t5/storage-at-microsoft/smb-signing-required-by-default-in-windows-insider/ba-p/3831704`">here</a>"\n                    Status = "Warning"\n                }\n            }\n            catch [System.Management.Automation.PSArgumentException] {\n                return @{\n                    Message = "Registry value not found."\n                    Status = "Fail"\n                }\n            }\n            catch [System.Management.Automation.ItemNotFoundException] {\n                return @{\n                    Message = "Registry key not found."\n                    Status = "Fail"\n                }\n            }\n        }\n ',
 'try {\n            if((Get-SmbServerConfiguration -ErrorAction Stop).EnableSecuritySignature -ne $Pass){\n                return @{\n                    Message = "EnableSecuritySignature is not set to Pass"\n                    Status = "Fail"\n                }\n            }\n            return @{\n                Message = "Compliant"\n                Status = "Pass"\n            }\n        }\n        catch {\n            try{\n                $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters" `\n                -Name "EnableSecuritySignature" `\n                | Select-Object -ExpandProperty "EnableSecuritySignature"\n                \n                return @{\n                    Message = "Registry value is \'$regValue\'. Get-SMBServerConfiguration failed, resorted to checking registry, which might not be 100% accurate. See <a href=`"https://learn.microsoft.com/en-us/troubleshoot/windows-server/networking/overview-server-message-block-signing#policy-locations-for-smb-signing`">here</a> and <a href=`"https://techcommunity.microsoft.com/t5/storage-at-microsoft/smb-signing-required-by-default-in-windows-insider/ba-p/3831704`">here</a>"\n                    Status = "Warning"\n                }\n            }\n            catch [System.Management.Automation.PSArgumentException] {\n                return @{\n                    Message = "Registry value not found."\n                    Status = "Fail"\n                }\n            }\n            catch [System.Management.Automation.ItemNotFoundException] {\n                return @{\n                    Message = "Registry key not found."\n                    Status = "Fail"\n                }\n            }\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters" `\n                -Name "enableforcedlogoff" `\n                | Select-Object -ExpandProperty "enableforcedlogoff"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters" `\n                -Name "SMBServerNameHardeningLevel" `\n                | Select-Object -ExpandProperty "SMBServerNameHardeningLevel"\n        \n            if (($regValue -ne 1) -and ($regValue -ne 2)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 1 or x == 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "RestrictAnonymousSAM" `\n                | Select-Object -ExpandProperty "RestrictAnonymousSAM"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "RestrictAnonymous" `\n                | Select-Object -ExpandProperty "RestrictAnonymous"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "DisableDomainCreds" `\n                | Select-Object -ExpandProperty "DisableDomainCreds"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "EveryoneIncludesAnonymous" `\n                | Select-Object -ExpandProperty "EveryoneIncludesAnonymous"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters" `\n                -Name "NullSessionPipes" `\n                | Select-Object -ExpandProperty "NullSessionPipes"\n        \n            if ($regValue -ne "") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: "\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurePipeServers\\Winreg\\AllowedExactPaths" `\n                -Name "Machine" `\n                | Select-Object -ExpandProperty "Machine"\n        \n            $reference = @(\n                "System\\CurrentControlSet\\Control\\ProductOptions"\n                "System\\CurrentControlSet\\Control\\Server Applications"\n                "Software\\Microsoft\\Windows NT\\CurrentVersion"\n            )\n            if (-not (Test-ArrayEqual $regValue $reference)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: System\\CurrentControlSet\\Control\\ProductOptions System\\CurrentControlSet\\Control\\Server Applications Software\\Microsoft\\Windows NT\\CurrentVersion"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurePipeServers\\Winreg\\AllowedPaths" `\n                -Name "Machine" `\n                | Select-Object -ExpandProperty "Machine"\n        \n            $reference = @(\n                "System\\CurrentControlSet\\Control\\Print\\Printers"\n                "System\\CurrentControlSet\\Services\\Eventlog"\n                "Software\\Microsoft\\OLAP Server"\n                "Software\\Microsoft\\Windows NT\\CurrentVersion\\Print"\n                "Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows"\n                "System\\CurrentControlSet\\Control\\ContentIndex"\n                "System\\CurrentControlSet\\Control\\Terminal Server"\n                "System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig"\n                "System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration"\n                "Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib"\n                "System\\CurrentControlSet\\Services\\SysmonLog"\n            )\n            if (-not (Test-ArrayEqual $regValue $reference)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: System\\CurrentControlSet\\Control\\Print\\Printers System\\CurrentControlSet\\Services\\Eventlog Software\\Microsoft\\OLAP Server Software\\Microsoft\\Windows NT\\CurrentVersion\\Print Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows System\\CurrentControlSet\\Control\\ContentIndex System\\CurrentControlSet\\Control\\Terminal Server System\\CurrentControlSet\\Control\\Terminal Server\\UserConfig System\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration Software\\Microsoft\\Windows NT\\CurrentVersion\\Perflib System\\CurrentControlSet\\Services\\SysmonLog"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters" `\n                -Name "RestrictNullSessAccess" `\n                | Select-Object -ExpandProperty "RestrictNullSessAccess"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa" `\n                -Name "restrictremotesam" `\n                | Select-Object -ExpandProperty "restrictremotesam"\n        \n            if ($regValue -ne "O:BAG:BAD:(A;;RC;;;BA)") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: O:BAG:BAD:(A;;RC;;;BA)"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters" `\n                -Name "NullSessionShares" `\n                | Select-Object -ExpandProperty "NullSessionShares"\n        \n            if ($regValue -ne "") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: "\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "ForceGuest" `\n                | Select-Object -ExpandProperty "ForceGuest"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "UseMachineId" `\n                | Select-Object -ExpandProperty "UseMachineId"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa\\MSV1_0" `\n                -Name "AllowNullSessionFallback" `\n                | Select-Object -ExpandProperty "AllowNullSessionFallback"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa\\pku2u" `\n                -Name "AllowOnlineID" `\n                | Select-Object -ExpandProperty "AllowOnlineID"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Kerberos\\Parameters" `\n                -Name "SupportedEncryptionTypes" `\n                | Select-Object -ExpandProperty "SupportedEncryptionTypes"\n        \n            if ($regValue -ne 2147483640) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2147483640"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "NoLMHash" `\n                | Select-Object -ExpandProperty "NoLMHash"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa" `\n                -Name "LmCompatibilityLevel" `\n                | Select-Object -ExpandProperty "LmCompatibilityLevel"\n        \n            if ($regValue -ne 5) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 5"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\LDAP" `\n                -Name "LDAPClientIntegrity" `\n                | Select-Object -ExpandProperty "LDAPClientIntegrity"\n        \n            if (($regValue -ne 1) -and ($regValue -ne 2)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 1 or x == 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa\\MSV1_0" `\n                -Name "NTLMMinClientSec" `\n                | Select-Object -ExpandProperty "NTLMMinClientSec"\n        \n            if ($regValue -ne 537395200) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 537395200"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa\\MSV1_0" `\n                -Name "NTLMMinServerSec" `\n                | Select-Object -ExpandProperty "NTLMMinServerSec"\n        \n            if ($regValue -ne 537395200) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 537395200"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Kernel" `\n                -Name "ObCaseInsensitive" `\n                | Select-Object -ExpandProperty "ObCaseInsensitive"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager" `\n                -Name "ProtectionMode" `\n                | Select-Object -ExpandProperty "ProtectionMode"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "FilterAdministratorToken" `\n                | Select-Object -ExpandProperty "FilterAdministratorToken"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "ConsentPromptBehaviorAdmin" `\n                | Select-Object -ExpandProperty "ConsentPromptBehaviorAdmin"\n        \n            if (($regValue -ne 1) -and ($regValue -ne 2)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 1 or x == 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "ConsentPromptBehaviorUser" `\n                | Select-Object -ExpandProperty "ConsentPromptBehaviorUser"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "EnableInstallerDetection" `\n                | Select-Object -ExpandProperty "EnableInstallerDetection"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "EnableSecureUIAPaths" `\n                | Select-Object -ExpandProperty "EnableSecureUIAPaths"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "EnableLUA" `\n                | Select-Object -ExpandProperty "EnableLUA"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "PromptOnSecureDesktop" `\n                | Select-Object -ExpandProperty "PromptOnSecureDesktop"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "EnableVirtualization" `\n                | Select-Object -ExpandProperty "EnableVirtualization"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Browser" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\IISADMIN" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\irmon" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LxssManager" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\FTPSVC" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\sshd" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\RpcLocator" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\RemoteAccess" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\simptcp" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\sacsvr" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SSDPSRV" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\upnphost" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WMSvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WMPNetworkSvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\icssvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W3SVC" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\XboxGipSvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\XblAuthManager" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\XblGameSave" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\XboxNetApiSvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile"       \n        $key = "EnableFirewall"\n        $expectedValue = 1;\n        $profileType = "Private"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile"       \n        $key = "DefaultInboundAction"\n        $expectedValue = 1;\n        $profileType = "Private"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile"       \n        $key = "DefaultOutboundAction"\n        $expectedValue = 0;\n        $profileType = "Private"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile"       \n        $key = "DisableNotifications"\n        $expectedValue = 1;\n        $profileType = "Private"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile\\Logging"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\Logging"       \n        $key = "LogFilePath"\n        $expectedValue = "%SystemRoot%\\System32\\logfiles\\firewall\\privatefw.log";\n        $profileType = "Private"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile\\Logging"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\Logging"         \n        $key = "LogFileSize"\n        $expectedValue = 16384;\n        $profileType = "Private"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile\\Logging"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\Logging"         \n        $key = "LogDroppedPackets"\n        $expectedValue = 1;\n        $profileType = "Private"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile\\Logging"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\Logging"         \n        $key = "LogSuccessfulConnections"\n        $expectedValue = 1;\n        $profileType = "Private"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile"       \n        $key = "EnableFirewall"\n        $expectedValue = 1;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile"       \n        $key = "DefaultInboundAction"\n        $expectedValue = 1;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile"       \n        $key = "DefaultOutboundAction"\n        $expectedValue = 0;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile"       \n        $key = "DisableNotifications"\n        $expectedValue = 1;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile"       \n        $key = "AllowLocalPolicyMerge"\n        $expectedValue = 0;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile"       \n        $key = "AllowLocalIPsecPolicyMerge"\n        $expectedValue = 0;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile\\Logging"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\\Logging"       \n        $key = "LogFilePath"\n        $expectedValue = "%SystemRoot%\\System32\\logfiles\\firewall\\publicfw.log";\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile\\Logging"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\\Logging"       \n        $key = "LogFileSize"\n        $expectedValue = 16384;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile\\Logging"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\\Logging"       \n        $key = "LogDroppedPackets"\n        $expectedValue = 1;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 '$path1 = "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile\\Logging"\n        $path2 = "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\\Logging"       \n        $key = "LogSuccessfulConnections"\n        $expectedValue = 1;\n        $profileType = "Public"\n        $result = $path1, $path2 | Test-FirewallPaths -Key $key -ExpectedValue $expectedValue -ProfileType $profileType\n        return @{\n            Message = $($result.Message)\n            Status = $($result.Status)\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Personalization" `\n                -Name "NoLockScreenCamera" `\n                | Select-Object -ExpandProperty "NoLockScreenCamera"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Personalization" `\n                -Name "NoLockScreenSlideshow" `\n                | Select-Object -ExpandProperty "NoLockScreenSlideshow"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\InputPersonalization" `\n                -Name "AllowInputPersonalization" `\n                | Select-Object -ExpandProperty "AllowInputPersonalization"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print" `\n                -Name "RpcAuthnLevelPrivacyEnabled" `\n                | Select-Object -ExpandProperty "RpcAuthnLevelPrivacyEnabled"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\mrxsmb10" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters" `\n                -Name "SMB1" `\n                | Select-Object -ExpandProperty "SMB1"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\kernel" `\n                -Name "DisableExceptionChainValidation" `\n                | Select-Object -ExpandProperty "DisableExceptionChainValidation"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\NetBT\\Parameters" `\n                -Name "NodeType" `\n                | Select-Object -ExpandProperty "NodeType"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest" `\n                -Name "UseLogonCredential" `\n                | Select-Object -ExpandProperty "UseLogonCredential"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon" `\n                -Name "AutoAdminLogon" `\n                | Select-Object -ExpandProperty "AutoAdminLogon"\n        \n            if ($regValue -ne "0") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip6\\Parameters" `\n                -Name "DisableIPSourceRouting" `\n                | Select-Object -ExpandProperty "DisableIPSourceRouting"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters" `\n                -Name "DisableIPSourceRouting" `\n                | Select-Object -ExpandProperty "DisableIPSourceRouting"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters" `\n                -Name "EnableICMPRedirect" `\n                | Select-Object -ExpandProperty "EnableICMPRedirect"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\NetBT\\Parameters" `\n                -Name "nonamereleaseondemand" `\n                | Select-Object -ExpandProperty "nonamereleaseondemand"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager" `\n                -Name "SafeDllSearchMode" `\n                | Select-Object -ExpandProperty "SafeDllSearchMode"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon" `\n                -Name "ScreenSaverGracePeriod" `\n                | Select-Object -ExpandProperty "ScreenSaverGracePeriod"\n        \n            if ($regValue -notmatch "^[0-5]$") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: Matching expression \'^[0-5]$\'"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Security" `\n                -Name "WarningLevel" `\n                | Select-Object -ExpandProperty "WarningLevel"\n        \n            if (($regValue -gt 90)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x <= 90"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient" `\n                -Name "DoHPolicy" `\n                | Select-Object -ExpandProperty "DoHPolicy"\n        \n            if (($regValue -ne 2) -and ($regValue -ne 3)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 2 or x == 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\DNSClient" `\n                -Name "EnableNetBIOS" `\n                | Select-Object -ExpandProperty "EnableNetBIOS"\n        \n            if (($regValue -ne 2) -and ($regValue -ne 0)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 2 or x == 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\DNSClient" `\n                -Name "EnableMulticast" `\n                | Select-Object -ExpandProperty "EnableMulticast"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\LanmanWorkstation" `\n                -Name "AllowInsecureGuestAuth" `\n                | Select-Object -ExpandProperty "AllowInsecureGuestAuth"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Network Connections" `\n                -Name "NC_AllowNetBridge_NLA" `\n                | Select-Object -ExpandProperty "NC_AllowNetBridge_NLA"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Network Connections" `\n                -Name "NC_ShowSharedAccessUI" `\n                | Select-Object -ExpandProperty "NC_ShowSharedAccessUI"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WcmSvc\\GroupPolicy" `\n                -Name "fMinimizeConnections" `\n                | Select-Object -ExpandProperty "fMinimizeConnections"\n        \n            if ($regValue -ne 3) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WcmSvc\\wifinetworkmanager\\config" `\n                -Name "AutoConnectAllowedOEM" `\n                | Select-Object -ExpandProperty "AutoConnectAllowedOEM"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers" `\n                -Name "RegisterSpoolerRemoteRpcEndPoint" `\n                | Select-Object -ExpandProperty "RegisterSpoolerRemoteRpcEndPoint"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers" `\n                -Name "RedirectionguardPolicy" `\n                | Select-Object -ExpandProperty "RedirectionguardPolicy"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\RPC" `\n                -Name "RpcUseNamedPipeProtocol" `\n                | Select-Object -ExpandProperty "RpcUseNamedPipeProtocol"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\RPC" `\n                -Name "RpcAuthentication" `\n                | Select-Object -ExpandProperty "RpcAuthentication"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\RPC" `\n                -Name "RpcProtocols" `\n                | Select-Object -ExpandProperty "RpcProtocols"\n        \n            if (($regValue -ne 5)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 5"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\RPC" `\n                -Name "ForceKerberosForRpc" `\n                | Select-Object -ExpandProperty "ForceKerberosForRpc"\n        \n            if (($regValue -ne 0) -and ($regValue -ne 1)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 0 or x == 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\RPC" `\n                -Name "RpcTcpPort" `\n                | Select-Object -ExpandProperty "RpcTcpPort"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint" `\n                -Name "RestrictDriverInstallationToAdministrators" `\n                | Select-Object -ExpandProperty "RestrictDriverInstallationToAdministrators"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers" `\n                -Name "CopyFilesPolicy" `\n                | Select-Object -ExpandProperty "CopyFilesPolicy"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint" `\n                -Name "NoWarningNoElevationOnInstall" `\n                | Select-Object -ExpandProperty "NoWarningNoElevationOnInstall"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint" `\n                -Name "UpdatePromptSettings" `\n                | Select-Object -ExpandProperty "UpdatePromptSettings"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit" `\n                -Name "ProcessCreationIncludeCmdLine_Enabled" `\n                | Select-Object -ExpandProperty "ProcessCreationIncludeCmdLine_Enabled"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters" `\n                -Name "AllowEncryptionOracle" `\n                | Select-Object -ExpandProperty "AllowEncryptionOracle"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation" `\n                -Name "AllowProtectedCreds" `\n                | Select-Object -ExpandProperty "AllowProtectedCreds"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard" `\n                -Name "EnableVirtualizationBasedSecurity" `\n                | Select-Object -ExpandProperty "EnableVirtualizationBasedSecurity"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard" `\n                -Name "RequirePlatformSecurityFeatures" `\n                | Select-Object -ExpandProperty "RequirePlatformSecurityFeatures"\n        \n            if (($regValue -ne 3) -and ($regValue -ne 1)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 3 or x == 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard" `\n                -Name "HypervisorEnforcedCodeIntegrity" `\n                | Select-Object -ExpandProperty "HypervisorEnforcedCodeIntegrity"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard" `\n                -Name "HVCIMATRequired" `\n                | Select-Object -ExpandProperty "HVCIMATRequired"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard" `\n                -Name "LsaCfgFlags" `\n                | Select-Object -ExpandProperty "LsaCfgFlags"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard" `\n                -Name "ConfigureSystemGuardLaunch" `\n                | Select-Object -ExpandProperty "ConfigureSystemGuardLaunch"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DeviceGuard" `\n                -Name "ConfigureKernelShadowStacksLaunch" `\n                | Select-Object -ExpandProperty "ConfigureKernelShadowStacksLaunch"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Device Metadata" `\n                -Name "PreventDeviceMetadataFromNetwork" `\n                | Select-Object -ExpandProperty "PreventDeviceMetadataFromNetwork"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Policies\\EarlyLaunch" `\n                -Name "DriverLoadPolicy" `\n                | Select-Object -ExpandProperty "DriverLoadPolicy"\n        \n            if ($regValue -ne 3) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\System" `\n                -Name "EnableCdp" `\n                | Select-Object -ExpandProperty "EnableCdp"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers" `\n                -Name "DisableWebPnPDownload" `\n                | Select-Object -ExpandProperty "DisableWebPnPDownload"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" `\n                -Name "NoWebServices" `\n                | Select-Object -ExpandProperty "NoWebServices"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\System" `\n                -Name "AllowCustomSSPsAPs" `\n                | Select-Object -ExpandProperty "AllowCustomSSPsAPs"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa" `\n                -Name "RunAsPPL" `\n                | Select-Object -ExpandProperty "RunAsPPL"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\System" `\n                -Name "BlockUserFromShowingAccountDetailsOnSignin" `\n                | Select-Object -ExpandProperty "BlockUserFromShowingAccountDetailsOnSignin"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\System" `\n                -Name "DontDisplayNetworkSelectionUI" `\n                | Select-Object -ExpandProperty "DontDisplayNetworkSelectionUI"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\System" `\n                -Name "DisableLockScreenAppNotifications" `\n                | Select-Object -ExpandProperty "DisableLockScreenAppNotifications"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\System" `\n                -Name "AllowDomainPINLogon" `\n                | Select-Object -ExpandProperty "AllowDomainPINLogon"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Power\\PowerSettings\\f15576e8-98b7-4186-b944-eafa664402d9" `\n                -Name "DCSettingIndex" `\n                | Select-Object -ExpandProperty "DCSettingIndex"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Power\\PowerSettings\\f15576e8-98b7-4186-b944-eafa664402d9" `\n                -Name "ACSettingIndex" `\n                | Select-Object -ExpandProperty "ACSettingIndex"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Power\\PowerSettings\\0e796bdb-100d-47d6-a2d5-f7d2daa51f51" `\n                -Name "DCSettingIndex" `\n                | Select-Object -ExpandProperty "DCSettingIndex"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Power\\PowerSettings\\0e796bdb-100d-47d6-a2d5-f7d2daa51f51" `\n                -Name "ACSettingIndex" `\n                | Select-Object -ExpandProperty "ACSettingIndex"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fAllowUnsolicited" `\n                | Select-Object -ExpandProperty "fAllowUnsolicited"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fAllowToGetHelp" `\n                | Select-Object -ExpandProperty "fAllowToGetHelp"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Rpc" `\n                -Name "EnableAuthEpResolution" `\n                | Select-Object -ExpandProperty "EnableAuthEpResolution"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Rpc" `\n                -Name "RestrictRemoteClients" `\n                | Select-Object -ExpandProperty "RestrictRemoteClients"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\W32Time\\TimeProviders\\NtpClient" `\n                -Name "Enabled" `\n                | Select-Object -ExpandProperty "Enabled"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Appx" `\n                -Name "BlockNonAdminUserInstall" `\n                | Select-Object -ExpandProperty "BlockNonAdminUserInstall"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\AppPrivacy" `\n                -Name "LetAppsActivateWithVoiceAboveLock" `\n                | Select-Object -ExpandProperty "LetAppsActivateWithVoiceAboveLock"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "MSAOptional" `\n                | Select-Object -ExpandProperty "MSAOptional"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Explorer" `\n                -Name "NoAutoplayfornonVolume" `\n                | Select-Object -ExpandProperty "NoAutoplayfornonVolume"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" `\n                -Name "NoAutorun" `\n                | Select-Object -ExpandProperty "NoAutorun"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" `\n                -Name "NoDriveTypeAutoRun" `\n                | Select-Object -ExpandProperty "NoDriveTypeAutoRun"\n        \n            if ($regValue -ne 255) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 255"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Biometrics\\FacialFeatures" `\n                -Name "EnhancedAntiSpoofing" `\n                | Select-Object -ExpandProperty "EnhancedAntiSpoofing"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CloudContent" `\n                -Name "DisableConsumerAccountStateContent" `\n                | Select-Object -ExpandProperty "DisableConsumerAccountStateContent"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CloudContent" `\n                -Name "DisableWindowsConsumerFeatures" `\n                | Select-Object -ExpandProperty "DisableWindowsConsumerFeatures"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Connect" `\n                -Name "RequirePinForPairing" `\n                | Select-Object -ExpandProperty "RequirePinForPairing"\n        \n            if (($regValue -ne 1) -and ($regValue -ne 2)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 1 or x == 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\CredUI" `\n                -Name "DisablePasswordReveal" `\n                | Select-Object -ExpandProperty "DisablePasswordReveal"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\CredUI" `\n                -Name "EnumerateAdministrators" `\n                | Select-Object -ExpandProperty "EnumerateAdministrators"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\System" `\n                -Name "NoLocalPasswordResetQuestions" `\n                | Select-Object -ExpandProperty "NoLocalPasswordResetQuestions"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DataCollection" `\n                -Name "AllowTelemetry" `\n                | Select-Object -ExpandProperty "AllowTelemetry"\n        \n            if (($regValue -ne 0) -and ($regValue -ne 1)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 0 or x == 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" `\n                -Name "DisableOneSettingsDownloads" `\n                | Select-Object -ExpandProperty "DisableOneSettingsDownloads"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" `\n                -Name "DoNotShowFeedbackNotifications" `\n                | Select-Object -ExpandProperty "DoNotShowFeedbackNotifications"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" `\n                -Name "EnableOneSettingsAuditing" `\n                | Select-Object -ExpandProperty "EnableOneSettingsAuditing"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" `\n                -Name "LimitDiagnosticLogCollection" `\n                | Select-Object -ExpandProperty "LimitDiagnosticLogCollection"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" `\n                -Name "LimitDumpCollection" `\n                | Select-Object -ExpandProperty "LimitDumpCollection"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\PreviewBuilds" `\n                -Name "AllowBuildPreview" `\n                | Select-Object -ExpandProperty "AllowBuildPreview"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DeliveryOptimization" `\n                -Name "DODownloadMode" `\n                | Select-Object -ExpandProperty "DODownloadMode"\n        \n            if (($regValue -eq 3)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x != 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\AppInstaller" `\n                -Name "EnableAppInstaller" `\n                | Select-Object -ExpandProperty "EnableAppInstaller"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\AppInstaller" `\n                -Name "EnableExperimentalFeatures" `\n                | Select-Object -ExpandProperty "EnableExperimentalFeatures"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\AppInstaller" `\n                -Name "EnableHashOverride" `\n                | Select-Object -ExpandProperty "EnableHashOverride"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\AppInstaller" `\n                -Name "EnableMSAppInstallerProtocol" `\n                | Select-Object -ExpandProperty "EnableMSAppInstallerProtocol"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\Application" `\n                -Name "Retention" `\n                | Select-Object -ExpandProperty "Retention"\n        \n            if ($regValue -ne "0") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\Application" `\n                -Name "MaxSize" `\n                | Select-Object -ExpandProperty "MaxSize"\n        \n            if (($regValue -lt 32768)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x >= 32768"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\Security" `\n                -Name "Retention" `\n                | Select-Object -ExpandProperty "Retention"\n        \n            if ($regValue -ne "0") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\Security" `\n                -Name "MaxSize" `\n                | Select-Object -ExpandProperty "MaxSize"\n        \n            if (($regValue -lt 196608)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x >= 196608"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\Setup" `\n                -Name "Retention" `\n                | Select-Object -ExpandProperty "Retention"\n        \n            if ($regValue -ne "0") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\Setup" `\n                -Name "MaxSize" `\n                | Select-Object -ExpandProperty "MaxSize"\n        \n            if (($regValue -lt 32768)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x >= 32768"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\System" `\n                -Name "Retention" `\n                | Select-Object -ExpandProperty "Retention"\n        \n            if ($regValue -ne "0") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\System" `\n                -Name "MaxSize" `\n                | Select-Object -ExpandProperty "MaxSize"\n        \n            if (($regValue -lt 32768)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x >= 32768"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Explorer" `\n                -Name "NoDataExecutionPrevention" `\n                | Select-Object -ExpandProperty "NoDataExecutionPrevention"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Explorer" `\n                -Name "NoHeapTerminationOnCorruption" `\n                | Select-Object -ExpandProperty "NoHeapTerminationOnCorruption"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" `\n                -Name "PreXPSP2ShellProtocolBehavior" `\n                | Select-Object -ExpandProperty "PreXPSP2ShellProtocolBehavior"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\HomeGroup" `\n                -Name "DisableHomeGroup" `\n                | Select-Object -ExpandProperty "DisableHomeGroup"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\MicrosoftAccount" `\n                -Name "DisableUserAuth" `\n                | Select-Object -ExpandProperty "DisableUserAuth"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Spynet" `\n                -Name "LocalSettingOverrideSpynetReporting" `\n                | Select-Object -ExpandProperty "LocalSettingOverrideSpynetReporting"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }            \n            $regValue = 0;\n            $regValueTwo = 0;\n            $Path = "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\ASR"\n            $Value = "ExploitGuard_ASR_Rules"\n            \n            $asrTest1 = Test-ASRRules -Path $Path -Value $Value \n            if($asrTest1){\n                $regValue = Get-ItemProperty -ErrorAction Stop `\n                    -Path $Path `\n                    -Name $Value `\n                    | Select-Object -ExpandProperty $Value\n            }\n\n            $Path2 = "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\ASR"\n            $Value2 = "ExploitGuard_ASR_Rules"\n\n            $asrTest2 = Test-ASRRules -Path $Path2 -Value $Value2 \n            if($asrTest2){\n                $regValueTwo = Get-ItemProperty -ErrorAction Stop `\n                    -Path $Path2 `\n                    -Name $Value2 `\n                    | Select-Object -ExpandProperty $Value2\n            }\n\n            if ($regValue -ne 1 -and $regValueTwo -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Network Protection" `\n                -Name "EnableNetworkProtection" `\n                | Select-Object -ExpandProperty "EnableNetworkProtection"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection" `\n                -Name "DisableIOAVProtection" `\n                | Select-Object -ExpandProperty "DisableIOAVProtection"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant"\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection" `\n                -Name "DisableRealtimeMonitoring" `\n                | Select-Object -ExpandProperty "DisableRealtimeMonitoring"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection" `\n                -Name "DisableBehaviorMonitoring" `\n                | Select-Object -ExpandProperty "DisableBehaviorMonitoring"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection" `\n                -Name "DisableScriptScanning" `\n                | Select-Object -ExpandProperty "DisableScriptScanning"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan" `\n                -Name "DisableRemovableDriveScanning" `\n                | Select-Object -ExpandProperty "DisableRemovableDriveScanning"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Scan" `\n                -Name "DisableEmailScanning" `\n                | Select-Object -ExpandProperty "DisableEmailScanning"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender" `\n                -Name "PUAProtection" `\n                | Select-Object -ExpandProperty "PUAProtection"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender" `\n                -Name "DisableAntiSpyware" `\n                | Select-Object -ExpandProperty "DisableAntiSpyware"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\AppHVSI" `\n                -Name "AuditApplicationGuard" `\n                | Select-Object -ExpandProperty "AuditApplicationGuard"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\AppHVSI" `\n                -Name "AllowCameraMicrophoneRedirection" `\n                | Select-Object -ExpandProperty "AllowCameraMicrophoneRedirection"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\AppHVSI" `\n                -Name "AllowPersistence" `\n                | Select-Object -ExpandProperty "AllowPersistence"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\AppHVSI" `\n                -Name "SaveFilesToHost" `\n                | Select-Object -ExpandProperty "SaveFilesToHost"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\AppHVSI" `\n                -Name "AppHVSIClipboardSettings" `\n                | Select-Object -ExpandProperty "AppHVSIClipboardSettings"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\AppHVSI" `\n                -Name "AllowAppHVSI_ProviderSet" `\n                | Select-Object -ExpandProperty "AllowAppHVSI_ProviderSet"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\OneDrive" `\n                -Name "DisableFileSyncNGSC" `\n                | Select-Object -ExpandProperty "DisableFileSyncNGSC"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "DisablePasswordSaving" `\n                | Select-Object -ExpandProperty "DisablePasswordSaving"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fDisableCdm" `\n                | Select-Object -ExpandProperty "fDisableCdm"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fPromptForPassword" `\n                | Select-Object -ExpandProperty "fPromptForPassword"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fEncryptRPCTraffic" `\n                | Select-Object -ExpandProperty "fEncryptRPCTraffic"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "SecurityLayer" `\n                | Select-Object -ExpandProperty "SecurityLayer"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "UserAuthentication" `\n                | Select-Object -ExpandProperty "UserAuthentication"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "MinEncryptionLevel" `\n                | Select-Object -ExpandProperty "MinEncryptionLevel"\n        \n            if ($regValue -ne 3) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "DeleteTempDirsOnExit" `\n                | Select-Object -ExpandProperty "DeleteTempDirsOnExit"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Feeds" `\n                -Name "DisableEnclosureDownload" `\n                | Select-Object -ExpandProperty "DisableEnclosureDownload"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search" `\n                -Name "AllowCortana" `\n                | Select-Object -ExpandProperty "AllowCortana"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search" `\n                -Name "AllowCortanaAboveLock" `\n                | Select-Object -ExpandProperty "AllowCortanaAboveLock"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search" `\n                -Name "AllowIndexingEncryptedStoresOrItems" `\n                | Select-Object -ExpandProperty "AllowIndexingEncryptedStoresOrItems"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search" `\n                -Name "AllowSearchToUseLocation" `\n                | Select-Object -ExpandProperty "AllowSearchToUseLocation"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\WindowsStore" `\n                -Name "RequirePrivateStoreOnly" `\n                | Select-Object -ExpandProperty "RequirePrivateStoreOnly"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\WindowsStore" `\n                -Name "AutoDownload" `\n                | Select-Object -ExpandProperty "AutoDownload"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\WindowsStore" `\n                -Name "DisableOSUpgrade" `\n                | Select-Object -ExpandProperty "DisableOSUpgrade"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Dsh" `\n                -Name "AllowNewsAndInterests" `\n                | Select-Object -ExpandProperty "AllowNewsAndInterests"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WTDS\\Components" `\n                -Name "NotifyMalicious" `\n                | Select-Object -ExpandProperty "NotifyMalicious"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WTDS\\Components" `\n                -Name "NotifyPasswordReuse" `\n                | Select-Object -ExpandProperty "NotifyPasswordReuse"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WTDS\\Components" `\n                -Name "NotifyUnsafeApp" `\n                | Select-Object -ExpandProperty "NotifyUnsafeApp"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WTDS\\Components" `\n                -Name "ServiceEnabled" `\n                | Select-Object -ExpandProperty "ServiceEnabled"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\MicrosoftEdge\\PhishingFilter" `\n                -Name "EnabledV9" `\n                | Select-Object -ExpandProperty "EnabledV9"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\MicrosoftEdge\\PhishingFilter" `\n                -Name "PreventOverride" `\n                | Select-Object -ExpandProperty "PreventOverride"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\GameDVR" `\n                -Name "AllowGameDVR" `\n                | Select-Object -ExpandProperty "AllowGameDVR"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Policies\\PassportForWork\\Biometrics" `\n                -Name "EnableESSwithSupportedPeripherals" `\n                | Select-Object -ExpandProperty "EnableESSwithSupportedPeripherals"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\WindowsInkWorkspace" `\n                -Name "AllowWindowsInkWorkspace" `\n                | Select-Object -ExpandProperty "AllowWindowsInkWorkspace"\n        \n            if (($regValue -ne 1) -and ($regValue -ne 0)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 1 or x == 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Installer" `\n                -Name "EnableUserControl" `\n                | Select-Object -ExpandProperty "EnableUserControl"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Installer" `\n                -Name "AlwaysInstallElevated" `\n                | Select-Object -ExpandProperty "AlwaysInstallElevated"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "EnableMPR" `\n                | Select-Object -ExpandProperty "EnableMPR"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "DisableAutomaticRestartSignOn" `\n                | Select-Object -ExpandProperty "DisableAutomaticRestartSignOn"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging" `\n                -Name "EnableScriptBlockLogging" `\n                | Select-Object -ExpandProperty "EnableScriptBlockLogging"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription" `\n                -Name "EnableTranscripting" `\n                | Select-Object -ExpandProperty "EnableTranscripting"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client" `\n                -Name "AllowBasic" `\n                | Select-Object -ExpandProperty "AllowBasic"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client" `\n                -Name "AllowUnencryptedTraffic" `\n                | Select-Object -ExpandProperty "AllowUnencryptedTraffic"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client" `\n                -Name "AllowDigest" `\n                | Select-Object -ExpandProperty "AllowDigest"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service" `\n                -Name "AllowBasic" `\n                | Select-Object -ExpandProperty "AllowBasic"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service" `\n                -Name "AllowUnencryptedTraffic" `\n                | Select-Object -ExpandProperty "AllowUnencryptedTraffic"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service" `\n                -Name "DisableRunAs" `\n                | Select-Object -ExpandProperty "DisableRunAs"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Sandbox" `\n                -Name "AllowClipboardRedirection" `\n                | Select-Object -ExpandProperty "AllowClipboardRedirection"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Sandbox" `\n                -Name "AllowNetworking" `\n                | Select-Object -ExpandProperty "AllowNetworking"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection" `\n                -Name "DisallowExploitProtectionOverride" `\n                | Select-Object -ExpandProperty "DisallowExploitProtectionOverride"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU" `\n                -Name "NoAutoRebootWithLoggedOnUsers" `\n                | Select-Object -ExpandProperty "NoAutoRebootWithLoggedOnUsers"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU" `\n                -Name "NoAutoUpdate" `\n                | Select-Object -ExpandProperty "NoAutoUpdate"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU" `\n                -Name "ScheduledInstallDay" `\n                | Select-Object -ExpandProperty "ScheduledInstallDay"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate" `\n                -Name "SetDisablePauseUXAccess" `\n                | Select-Object -ExpandProperty "SetDisablePauseUXAccess"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate" `\n                -Name "ManagePreviewBuildsPolicyValue" `\n                | Select-Object -ExpandProperty "ManagePreviewBuildsPolicyValue"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop" `\n                -Name "ScreenSaveActive" `\n                | Select-Object -ExpandProperty "ScreenSaveActive"\n        \n            if ($regValue -ne "1") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop" `\n                -Name "ScreenSaverIsSecure" `\n                | Select-Object -ExpandProperty "ScreenSaverIsSecure"\n        \n            if ($regValue -ne "1") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityOption = Get-AuditResource "WindowsSecurityPolicy"\n        $setOption = $securityOption[\'System Access\']["EnableGuestAccount"]\n        \n        if ($null -eq $setOption) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        if ($setOption -ne 0) {\n            return @{\n                Message = "\'EnableGuestAccount\' currently set to: $setOption. Expected: 0"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityOption = Get-AuditResource "WindowsSecurityPolicy"\n        $setOption = $securityOption[\'System Access\']["NewAdministratorName"]\n        \n        if ($null -eq $setOption) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        if ($setOption -notmatch "^(?!.*\\bAdministrator\\b).*$") {\n            return @{\n                Message = "\'NewAdministratorName\' currently set to: $setOption."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityOption = Get-AuditResource "WindowsSecurityPolicy"\n        $setOption = $securityOption[\'System Access\']["NewGuestName"]\n        \n        if ($null -eq $setOption) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        if ($setOption -notmatch "^(?i)(?!.*\\b(?:Guest|Gast)\\b).*$") {\n            return @{\n                Message = "\'NewGuestName\' currently set to: $setOption."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityOption = Get-AuditResource "WindowsSecurityPolicy"\n        $setOption = $securityOption[\'System Access\']["LSAAnonymousNameLookup"]\n\n        if ($null -eq $setOption) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        if ($setOption -ne 0) {\n            return @{\n                Message = "\'LSAAnonymousNameLookup\' currently set to: $setOption. Expected: 0"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityOption = Get-AuditResource "WindowsSecurityPolicy"\n        $setOption = $securityOption[\'System Access\']["ForceLogoffWhenHourExpire"]\n        \n        if ($null -eq $setOption) {\n            return @{\n                Message = "Currently not set."\n                Status = "Fail"\n            }\n        }\n        if ($setOption -ne 1) {\n            return @{\n                Message = "\'ForceLogoffWhenHourExpire\' currently set to: $setOption. Expected: 1"\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n    }\n}\nï»¿$RootPath = Split-Path $MyInvocation.MyCommand.Path -Parent\n$RootPath = Split-Path $RootPath -Parent\n. "$RootPath\\Helpers\\AuditGroupFunctions.ps1"\n$hyperVStatus = CheckHyperVStatus\n# Common\nfunction ConvertTo-NTAccountUser {\n\t[CmdletBinding()]\n\t[OutputType([hashtable])]\n\tParam(\n\t\t[Parameter(Mandatory = $Pass, ValueFromPipeline = $Pass)]\n\t\t[string] $Name\n\t)\n\n\tprocess {\n        try {\n            # Convert Domaingroups to german\n            $language = Get-UICulture\n            if ($language.Name -match "de-DE"){\n                if ($name -eq "Enterprise Admins"){\n                    $name = "Organisations-Admins"\n                }\n                elseif ($name -eq "Domain Admins"){\n                    $name = "DomÃ¤nen-Admins"\n                }\n            }\n\n            # Convert friendlynames to SID\n            $map = @{\n                "Administrators" = "S-1-5-32-544"\n                "Guests" = "S-1-5-32-546"\n                "Local account" = "S-1-5-113"\n                "Local Service" = "S-1-5-19"\n                "Network Service" = "S-1-5-20"\n                "NT AUTHORITY\\Authenticated Users" = "S-1-5-11"\n                "Remote Desktop Users" = "S-1-5-32-555"\n                "Service" = "S-1-5-6"\n                "Users" = "S-1-5-32-545"\n                "NT VIRTUAL MACHINE\\Virtual Machines" = "S-1-5-83-0"\n            }\n\n            if ($map.ContainsKey($name)) {\n                $name = $map[$name]\n            }\n\n            # Identity doesn\'t exist on when Hyper-V isn\'t installed\n            if ($Name -eq "S-1-5-83-0" -and $hyperVStatus -ne "Enabled") {\n                return $null\n            }\n\n            Write-Verbose "[ConvertTo-NTAccountUser] Converting identity \'$Name\' to NTAccount"\n            if ($Name -match "^(S-[0-9-]{3,})") {\n                $sidAccount = [System.Security.Principal.SecurityIdentifier]$Name\n            }\n            else {\n                $sidAccount = ([System.Security.Principal.NTAccount]$Name).Translate([System.Security.Principal.SecurityIdentifier])\n            }\n            return @{\n                Account = $sidAccount.Translate([System.Security.Principal.NTAccount])\n                Sid = $sidAccount.Value\n            }\n        }\n        catch {\n            return @{\n                Account = "Orphaned Account"\n                Sid     = $Name\n            }\n        ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeTrustedCredManAccessPrivilege"]\n        $identityAccounts = @(\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeTrustedCredManAccessPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeNetworkLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-32-555"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeNetworkLogonRight\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeTcbPrivilege"]\n        $identityAccounts = @(\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeTcbPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeIncreaseQuotaPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-19"\n            "S-1-5-20"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeIncreaseQuotaPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeInteractiveLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-32-545"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeInteractiveLogonRight\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeRemoteInteractiveLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-32-555"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeRemoteInteractiveLogonRight\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeBackupPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeBackupPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeSystemtimePrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-19"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeSystemtimePrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeTimeZonePrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-19"\n            "S-1-5-32-545"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeTimeZonePrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeCreatePagefilePrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeCreatePagefilePrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeCreateTokenPrivilege"]\n        $identityAccounts = @(\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeCreateTokenPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeCreateGlobalPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-19"\n            "S-1-5-20"\n            "S-1-5-6"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeCreateGlobalPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeCreatePermanentPrivilege"]\n        $identityAccounts = @(\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeCreatePermanentPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeDebugPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n\n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeDebugPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        #No UserRights on System comparing to publisher recommendation\n        if($null -eq $currentUserRights -and $identityAccounts.Count -gt 0){\n            return @{\n                Status = "Pass"\n                Message = "Compliant - No UserRights are assigned to this policy. This configuration is even more secure than publisher recommendation."\n            }\n        }\n        #Less UserRights on System comparing to publisher recommendation\n        if($currentUserRights.Count -lt $identityAccounts.Count){\n            $users = ""\n            foreach($currentUser in $currentUserRights){\n                $users += $currentUser.Values\n            }\n            return @{\n                Status = "Pass"\n                Message = "Compliant - Positive Deviation to publisher. Less UserRights are assigned to this policy than expected: $($users)"\n            }\n        }\n        #Same UserRights on System comparing to publisher recommendation\n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeDenyNetworkLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-546"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $missingUsers = $identityAccounts.Account | Where-Object { $_ -notin $currentUserRights.Account }\n        \n        if (($missingUsers.Count -gt 0)) {\n            $messages = @()\n            if ($missingUsers.Count -gt 0) {\n                $messages += "The user \'SeDenyNetworkLogonRight\' setting does not contain the following users: " + ($missingUsers -join ", ")\n            }\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeDenyBatchLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-546"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        \n        $missingUsers = $identityAccounts.Account | Where-Object { $_ -notin $currentUserRights.Account }\n        \n        if (($missingUsers.Count -gt 0)) {\n            $messages = @()\n            if ($missingUsers.Count -gt 0) {\n                $messages += "The user \'SeDenyBatchLogonRight\' setting does not contain the following users: " + ($missingUsers -join ", ")\n            }\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeDenyServiceLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-546"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $missingUsers = $identityAccounts.Account | Where-Object { $_ -notin $currentUserRights.Account }\n        \n        if (($missingUsers.Count -gt 0)) {\n            $messages = @()\n            if ($missingUsers.Count -gt 0) {\n                $messages += "The user \'SeDenyServiceLogonRight\' setting does not contain the following users: " + ($missingUsers -join ", ")\n            }\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeDenyInteractiveLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-546"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $missingUsers = $identityAccounts.Account | Where-Object { $_ -notin $currentUserRights.Account }\n        \n        if (($missingUsers.Count -gt 0)) {\n            $messages = @()\n            if ($missingUsers.Count -gt 0) {\n                $messages += "The user \'SeDenyInteractiveLogonRight\' setting does not contain the following users: " + ($missingUsers -join ", ")\n            }\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeDenyRemoteInteractiveLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-546"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $missingUsers = $identityAccounts.Account | Where-Object { $_ -notin $currentUserRights.Account }\n        \n        if (($missingUsers.Count -gt 0)) {\n            $messages = @()\n            if ($missingUsers.Count -gt 0) {\n                $messages += "The user \'SeDenyRemoteInteractiveLogonRight\' setting does not contain the following users: " + ($missingUsers -join ", ")\n            }\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeEnableDelegationPrivilege"]\n        $identityAccounts = @() | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeEnableDelegationPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeRemoteShutdownPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeRemoteShutdownPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeAuditPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-19"\n            "S-1-5-20"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeAuditPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeImpersonatePrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-19"\n            "S-1-5-20"\n            "S-1-5-6"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeImpersonatePrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeIncreaseBasePriorityPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-90-0"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeIncreaseBasePriorityPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeLoadDriverPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeLoadDriverPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeLockMemoryPrivilege"]\n        $identityAccounts = @(\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeLockMemoryPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeSecurityPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeSecurityPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeRelabelPrivilege"]\n        $identityAccounts = @(\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeRelabelPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeSystemEnvironmentPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeSystemEnvironmentPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeManageVolumePrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeManageVolumePrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeProfileSingleProcessPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeProfileSingleProcessPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeSystemProfilePrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-80-3139157870-2983391045-3678747466-658725712-1809340420"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeSystemProfilePrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeAssignPrimaryTokenPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-19"\n            "S-1-5-20"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeAssignPrimaryTokenPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeRestorePrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeRestorePrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeShutdownPrivilege"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n            "S-1-5-32-545"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeShutdownPrivilege\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "Fail"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "Pass"\n            Message = "Compliant"\n        }\n ',]

def powershell_run_script(command):
    """Runs a PowerShell command and checks its compliance status."""
    script = ["powershell", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command", command]
    try:
        result = subprocess.run(
            script,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        # Log output and errors for debugging
        print(f"Command Output: {result.stdout}")
        print(f"Command Error: {result.stderr}")
        
        if result.returncode == 0 and "Pass" in result.stdout:
            return 1  # Compliance Pass
        else:
            return 0  # Compliance Fail
    except Exception as e:
        print(f"Error executing command: {e}")
        return None

def run_l1_11_std():
    """Runs compliance checks and generates an audit report."""
    pass_count = 0
    fail_count = 0
    results = {"cis_index": [], "title": [], "status": []}
    
    for i in range(len(cis_index)):
        # Append results incrementally
        results["cis_index"].append(cis_index[i])
        results["title"].append(title[i])
        status = powershell_run_script(code[i])
        results["status"].append("Pass" if status == 1 else "Fail")
        
        if status == 1:
            pass_count += 1
        else:
            fail_count += 1
    
    # Create a DataFrame for the results
    df = pd.DataFrame(data=results)
    filename = os.path.join("./", f"audit_file_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.csv")
    df.to_csv(filename, index=False)
    
    print("Stats:-")
    print("Pass count:", pass_count)
    print("Fail count:", fail_count)
    print(f"Compliance Percentage: {(pass_count / (pass_count + fail_count)) * 100:.2f}%")
    print(f"Audit report saved to {filename}")

run_l1_11_std()
print(len(title),len(cis_index),len(code))