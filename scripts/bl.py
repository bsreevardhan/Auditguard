cis_index = ['2.3.7.3',
 '18.9.7.1.1',
 '18.9.7.1.2',
 '18.9.7.1.3',
 '18.9.7.1.4',
 '18.9.7.1.6',
 '18.9.24.1',
 '18.9.32.6.3',
 '18.9.32.6.4',
 '18.10.9.1.1',
 '18.10.9.1.2',
 '18.10.9.1.3',
 '18.10.9.1.4',
 '18.10.9.1.5',
 '18.10.9.1.6',
 '18.10.9.1.7',
 '18.10.9.1.8',
 '18.10.9.1.9',
 '18.10.9.1.10',
 '18.10.9.1.11',
 '18.10.9.1.12',
 '18.10.9.1.13',
 '18.10.9.2.1',
 '18.10.9.2.2',
 '18.10.9.2.3',
 '18.10.9.2.4',
 '18.10.9.2.5',
 '18.10.9.2.6',
 '18.10.9.2.7',
 '18.10.9.2.8',
 '18.10.9.2.9',
 '18.10.9.2.10',
 '18.10.9.2.11',
 '18.10.9.2.12',
 '18.10.9.2.13',
 '18.10.9.2.14',
 '18.10.9.3.1',
 '18.10.9.3.2',
 '18.10.9.3.3',
 '18.10.9.3.4',
 '18.10.9.3.5',
 '18.10.9.3.6',
 '18.10.9.3.7',
 '18.10.9.3.8',
 '18.10.9.3.9',
 '18.10.9.3.10',
 '18.10.9.3.11',
 '18.10.9.3.12',
 '18.10.9.3.13',
 '18.10.9.3.14',
 '18.10.9.3.15',
 '18.10.9.4']

title = ["Ensure 'Interactive logon: Machine account lockout threshold' is set to '10 or fewer invalid logon attempts, but not 0'",
 "Ensure 'Prevent installation of devices that match any of these device IDs' is set to 'Enabled'",
 "Ensure 'Prevent installation of devices that match any of these device IDs: Prevent installation of devices that match any of these device IDs' is set to 'PCI\\CC_0C0A'",
 "Ensure 'Prevent installation of devices that match any of these device IDs: Also apply to matching devices that are already installed.' is set to 'Pass' (checked)",
 "Ensure 'Prevent installation of devices using drivers that match these device setup classes' is set to 'Enabled'",
 "Ensure 'Prevent installation of devices using drivers that match these device setup classes: Also apply to matching devices that are already installed.' is set to 'Pass' (checked)",
 "Ensure 'Enumeration policy for external devices incompatible with Kernel DMA Protection' is set to 'Enabled: Block All'",
 "Ensure 'Allow standby states (S1-S3) when sleeping (on battery)' is set to 'Disabled'",
 "Ensure 'Allow standby states (S1-S3) when sleeping (plugged in)' is set to 'Disabled'",
 "Ensure 'Allow access to BitLocker-protected fixed data drives from earlier versions of Windows' is set to 'Disabled'",
 "Ensure 'Choose how BitLocker-protected fixed drives can be recovered' is set to 'Enabled'",
 "Ensure 'Choose how BitLocker-protected fixed drives can be recovered: Allow data recovery agent' is set to 'Enabled: Pass'",
 "Ensure 'Choose how BitLocker-protected fixed drives can be recovered: Recovery Password' is set to 'Enabled: Allow 48-digit recovery password'",
 "Ensure 'Choose how BitLocker-protected fixed drives can be recovered: Recovery Key' is set to 'Enabled: Allow 256-bit recovery key'",
 "Ensure 'Choose how BitLocker-protected fixed drives can be recovered: Omit recovery options from the BitLocker setup wizard' is set to 'Enabled: Pass'",
 "Ensure 'Choose how BitLocker-protected fixed drives can be recovered: Save BitLocker recovery information to AD DS for fixed data drives' is set to 'Enabled: Fail'",
 "Ensure 'Choose how BitLocker-protected fixed drives can be recovered: Configure storage of BitLocker recovery information to AD DS' is set to 'Enabled: Backup recovery passwords and key packages'",
 "Ensure 'Choose how BitLocker-protected fixed drives can be recovered: Do not enable BitLocker until recovery information is stored to AD DS for fixed data drives' is set to 'Enabled: Fail'",
 "Ensure 'Configure use of hardware-based encryption for fixed data drives' is set to 'Disabled'",
 "Ensure 'Configure use of passwords for fixed data drives' is set to 'Disabled'",
 "Ensure 'Configure use of smart cards on fixed data drives' is set to 'Enabled'",
 "Ensure 'Configure use of smart cards on fixed data drives: Require use of smart cards on fixed data drives' is set to 'Enabled: Pass'",
 "Ensure 'Allow enhanced PINs for startup' is set to 'Enabled'",
 "Ensure 'Allow Secure Boot for integrity validation' is set to 'Enabled'",
 "Ensure 'Choose how BitLocker-protected operating system drives can be recovered' is set to 'Enabled'",
 "Ensure 'Choose how BitLocker-protected operating system drives can be recovered: Allow data recovery agent' is set to 'Enabled: Fail'",
 "Ensure 'Choose how BitLocker-protected operating system drives can be recovered: Recovery Password' is set to 'Enabled: Require 48-digit recovery password'",
 "Ensure 'Choose how BitLocker-protected operating system drives can be recovered: Recovery Key' is set to 'Enabled: Do not allow 256-bit recovery key'",
 "Ensure 'Choose how BitLocker-protected operating system drives can be recovered: Omit recovery options from the BitLocker setup wizard' is set to 'Enabled: Pass'",
 "Ensure 'Choose how BitLocker-protected operating system drives can be recovered: Save BitLocker recovery information to AD DS for operating system drives' is set to 'Enabled: Pass'",
 "Ensure 'Choose how BitLocker-protected operating system drives can be recovered: Configure storage of BitLocker recovery information to AD DS:' is set to 'Enabled: Store recovery passwords and key packages'",
 "Ensure 'Choose how BitLocker-protected operating system drives can be recovered: Do not enable BitLocker until recovery information is stored to AD DS for operating system drives' is set to 'Enabled: Pass'",
 "Ensure 'Configure use of hardware-based encryption for operating system drives' is set to 'Disabled'",
 "Ensure 'Configure use of passwords for operating system drives' is set to 'Disabled'",
 "Ensure 'Require additional authentication at startup' is set to 'Enabled'",
 "Ensure 'Require additional authentication at startup: Allow BitLocker without a compatible TPM' is set to 'Enabled: Fail'",
 "Ensure 'Allow access to BitLocker-protected removable data drives from earlier versions of Windows' is set to 'Disabled'",
 "Ensure 'Choose how BitLocker-protected removable drives can be recovered' is set to 'Enabled'",
 "Ensure 'Choose how BitLocker-protected removable drives can be recovered: Allow data recovery agent' is set to 'Enabled: Pass'",
 "Ensure 'Choose how BitLocker-protected removable drives can be recovered: Recovery Password' is set to 'Enabled: Do not allow 48-digit recovery password'",
 "Ensure 'Choose how BitLocker-protected removable drives can be recovered: Recovery Key' is set to 'Enabled: Do not allow 256-bit recovery key'",
 "Ensure 'Choose how BitLocker-protected removable drives can be recovered: Omit recovery options from the BitLocker setup wizard' is set to 'Enabled: Pass'",
 "Ensure 'Choose how BitLocker-protected removable drives can be recovered: Save BitLocker recovery information to AD DS for removable data drives' is set to 'Enabled: Fail'",
 "Ensure 'Choose how BitLocker-protected removable drives can be recovered: Configure storage of BitLocker recovery information to AD DS:' is set to 'Enabled: Backup recovery passwords and key packages'",
 "Ensure 'Choose how BitLocker-protected removable drives can be recovered: Do not enable BitLocker until recovery information is stored to AD DS for removable data drives' is set to 'Enabled: Fail'",
 "Ensure 'Configure use of hardware-based encryption for removable data drives' is set to 'Disabled'",
 "Ensure 'Configure use of passwords for removable data drives' is set to 'Disabled'",
 "Ensure 'Configure use of smart cards on removable data drives' is set to 'Enabled'",
 "Ensure 'Configure use of smart cards on removable data drives: Require use of smart cards on removable data drives' is set to 'Enabled: Pass'",
 "Ensure 'Deny write access to removable drives not protected by BitLocker' is set to 'Enabled'",
 "Ensure 'Deny write access to removable drives not protected by BitLocker: Do not allow write access to devices configured in another organization' is set to 'Enabled: Fail'",
 "Ensure 'Disable new DMA devices when this computer is locked' is set to 'Enabled'"]

code = ['try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "MaxDevicePasswordFailedAttempts" `\n                | Select-Object -ExpandProperty "MaxDevicePasswordFailedAttempts"\n        \n            if (($regValue -gt 10 -or $regValue -le 3)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x <= 10 and x > 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Restrictions" `\n                -Name "DenyDeviceIDs" `\n                | Select-Object -ExpandProperty "DenyDeviceIDs"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Restrictions\\DenyDeviceIDs" `\n                -Name "1" `\n                | Select-Object -ExpandProperty "1"\n        \n            if ($regValue -ne "PCI\\CC_0C0A") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: PCI\\CC_0C0A"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Restrictions" `\n                -Name "DenyDeviceIDsRetroactive" `\n                | Select-Object -ExpandProperty "DenyDeviceIDsRetroactive"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Restrictions" `\n                -Name "DenyDeviceClasses" `\n                | Select-Object -ExpandProperty "DenyDeviceClasses"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Restrictions" `\n                -Name "DenyDeviceClassesRetroactive" `\n                | Select-Object -ExpandProperty "DenyDeviceClassesRetroactive"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Kernel DMA Protection" `\n                -Name "DeviceEnumerationPolicy" `\n                | Select-Object -ExpandProperty "DeviceEnumerationPolicy"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Power\\PowerSettings\\abfc2519-3608-4c2a-94ea-171b0ed546ab" `\n                -Name "DCSettingIndex" `\n                | Select-Object -ExpandProperty "DCSettingIndex"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Power\\PowerSettings\\abfc2519-3608-4c2a-94ea-171b0ed546ab" `\n                -Name "ACSettingIndex" `\n                | Select-Object -ExpandProperty "ACSettingIndex"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "FDVDiscoveryVolumeType" `\n                | Select-Object -ExpandProperty "FDVDiscoveryVolumeType"\n        \n            if ($regValue -ne "") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: This value should be empty."\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVRecovery" `\n                | Select-Object -ExpandProperty "FDVRecovery"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVManageDRA" `\n                | Select-Object -ExpandProperty "FDVManageDRA"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVRecoveryPassword" `\n                | Select-Object -ExpandProperty "FDVRecoveryPassword"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVRecoveryKey" `\n                | Select-Object -ExpandProperty "FDVRecoveryKey"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVHideRecoveryPage" `\n                | Select-Object -ExpandProperty "FDVHideRecoveryPage"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVActiveDirectoryBackup" `\n                | Select-Object -ExpandProperty "FDVActiveDirectoryBackup"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVActiveDirectoryInfoToStore" `\n                | Select-Object -ExpandProperty "FDVActiveDirectoryInfoToStore"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVRequireActiveDirectoryBackup" `\n                | Select-Object -ExpandProperty "FDVRequireActiveDirectoryBackup"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "FDVHardwareEncryption" `\n                | Select-Object -ExpandProperty "FDVHardwareEncryption"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "FDVPassphrase" `\n                | Select-Object -ExpandProperty "FDVPassphrase"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "FDVAllowUserCert" `\n                | Select-Object -ExpandProperty "FDVAllowUserCert"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "FDVEnforceUserCert" `\n                | Select-Object -ExpandProperty "FDVEnforceUserCert"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "UseEnhancedPin" `\n                | Select-Object -ExpandProperty "UseEnhancedPin"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "OSAllowSecureBootForIntegrity" `\n                | Select-Object -ExpandProperty "OSAllowSecureBootForIntegrity"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSRecovery" `\n                | Select-Object -ExpandProperty "OSRecovery"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSManageDRA" `\n                | Select-Object -ExpandProperty "OSManageDRA"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSRecoveryPassword" `\n                | Select-Object -ExpandProperty "OSRecoveryPassword"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSRecoveryKey" `\n                | Select-Object -ExpandProperty "OSRecoveryKey"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSHideRecoveryPage" `\n                | Select-Object -ExpandProperty "OSHideRecoveryPage"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSActiveDirectoryBackup" `\n                | Select-Object -ExpandProperty "OSActiveDirectoryBackup"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSActiveDirectoryInfoToStore" `\n                | Select-Object -ExpandProperty "OSActiveDirectoryInfoToStore"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSRequireActiveDirectoryBackup" `\n                | Select-Object -ExpandProperty "OSRequireActiveDirectoryBackup"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "OSHardwareEncryption" `\n                | Select-Object -ExpandProperty "OSHardwareEncryption"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "OSPassphrase" `\n                | Select-Object -ExpandProperty "OSPassphrase"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "UseAdvancedStartup" `\n                | Select-Object -ExpandProperty "UseAdvancedStartup"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "EnableBDEWithNoTPM" `\n                | Select-Object -ExpandProperty "EnableBDEWithNoTPM"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "RDVDiscoveryVolumeType" `\n                | Select-Object -ExpandProperty "RDVDiscoveryVolumeType"\n        \n            if ($regValue -ne "") {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: "\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVRecovery" `\n                | Select-Object -ExpandProperty "RDVRecovery"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVManageDRA" `\n                | Select-Object -ExpandProperty "RDVManageDRA"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVRecoveryPassword" `\n                | Select-Object -ExpandProperty "RDVRecoveryPassword"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVRecoveryKey" `\n                | Select-Object -ExpandProperty "RDVRecoveryKey"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVHideRecoveryPage" `\n                | Select-Object -ExpandProperty "RDVHideRecoveryPage"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVActiveDirectoryBackup" `\n                | Select-Object -ExpandProperty "RDVActiveDirectoryBackup"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVActiveDirectoryInfoToStore" `\n                | Select-Object -ExpandProperty "RDVActiveDirectoryInfoToStore"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVRequireActiveDirectoryBackup" `\n                | Select-Object -ExpandProperty "RDVRequireActiveDirectoryBackup"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "RDVHardwareEncryption" `\n                | Select-Object -ExpandProperty "RDVHardwareEncryption"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "RDVPassphrase" `\n                | Select-Object -ExpandProperty "RDVPassphrase"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "RDVAllowUserCert" `\n                | Select-Object -ExpandProperty "RDVAllowUserCert"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "RDVEnforceUserCert" `\n                | Select-Object -ExpandProperty "RDVEnforceUserCert"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Policies\\Microsoft\\FVE" `\n                -Name "RDVDenyWriteAccess" `\n                | Select-Object -ExpandProperty "RDVDenyWriteAccess"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE" `\n                -Name "RDVDenyCrossOrg" `\n                | Select-Object -ExpandProperty "RDVDenyCrossOrg"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\FVE" `\n                -Name "DisableExternalDMAUnderLock" `\n                | Select-Object -ExpandProperty "DisableExternalDMAUnderLock"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ']

import subprocess
import pandas as pd
import os
import datetime



def powershell_run_script(command):
    """Runs a PowerShell command and checks its compliance status."""
    script = ["powershell", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command", command]
    try:
        result = subprocess.run(
            script,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        # Log output and errors for debugging
        print(f"Command Output: {result.stdout}")
        print(f"Command Error: {result.stderr}")
        
        if result.returncode == 0 and "Pass" in result.stdout:
            return 1  # Compliance Pass
        else:
            return 0  # Compliance Fail
    except Exception as e:
        print(f"Error executing command: {e}")
        return None

def run_bl_11_std():
    """Runs compliance checks and generates an audit report."""
    pass_count = 0
    fail_count = 0
    results = {"cis_index": [], "title": [], "status": []}
    
    for i in range(len(cis_index)):
        # Append results incrementally
        results["cis_index"].append(cis_index[i])
        results["title"].append(title[i])
        status = powershell_run_script(code[i])
        results["status"].append("Pass" if status == 1 else "Fail")
        
        if status == 1:
            pass_count += 1
        else:
            fail_count += 1
    
    # Create a DataFrame for the results
    df = pd.DataFrame(data=results)
    filename = os.path.join("./", f"audit_file_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.csv")
    df.to_csv(filename, index=False)
    
    print("Stats:-")
    print("Pass count:", pass_count)
    print("Fail count:", fail_count)
    print(f"Compliance Percentage: {(pass_count / (pass_count + fail_count)) * 100:.2f}%")
    print(f"Audit report saved to {filename}")

run_bl_11_std()



        
